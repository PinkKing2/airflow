#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <winsock2.h>
#include <Windows.h>
#include <iostream>
#include <cstdint>
#include <intrin.h>
#include <wininet.h>
#include <filesystem>
#include <fstream>
#include <format>
#include <map>
#include <array>

#pragma comment(lib, "wininet.lib")
#pragma comment(lib, "Ws2_32.lib")

#include "bins.hpp"
#include "relocations.hpp"
#include "min_hook.hpp"

void fix_imports_dynamic(uint32_t mem)
{
	*reinterpret_cast<FARPROC*>(mem + 0x0) = GetProcAddress(LoadLibraryA("advapi32.dll"), "CryptAcquireContextW");
	*reinterpret_cast<FARPROC*>(mem + 0x4) = GetProcAddress(LoadLibraryA("advapi32.dll"), "CryptGenRandom");
	*reinterpret_cast<FARPROC*>(mem + 0x8) = GetProcAddress(LoadLibraryA("advapi32.dll"), "CryptReleaseContext");
	*reinterpret_cast<FARPROC*>(mem + 0x10) = GetProcAddress(LoadLibraryA("imm32.dll"), "ImmSetCompositionWindow");
	*reinterpret_cast<FARPROC*>(mem + 0x14) = GetProcAddress(LoadLibraryA("imm32.dll"), "ImmReleaseContext");
	*reinterpret_cast<FARPROC*>(mem + 0x18) = GetProcAddress(LoadLibraryA("imm32.dll"), "ImmGetContext");
	*reinterpret_cast<FARPROC*>(mem + 0x20) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ReleaseSemaphore");
	*reinterpret_cast<FARPROC*>(mem + 0x24) = GetProcAddress(LoadLibraryA("kernel32.dll"), "WaitForSingleObject");
	*reinterpret_cast<FARPROC*>(mem + 0x28) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CloseHandle");
	*reinterpret_cast<FARPROC*>(mem + 0x2C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateSemaphoreA");
	*reinterpret_cast<FARPROC*>(mem + 0x30) = GetProcAddress(LoadLibraryA("kernel32.dll"), "InitOnceInitialize");
	*reinterpret_cast<FARPROC*>(mem + 0x34) = GetProcAddress(LoadLibraryA("kernel32.dll"), "DeleteCriticalSection");
	*reinterpret_cast<FARPROC*>(mem + 0x38) = GetProcAddress(LoadLibraryA("kernel32.dll"), "AcquireSRWLockExclusive");
	*reinterpret_cast<FARPROC*>(mem + 0x3C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ReleaseSRWLockShared");
	*reinterpret_cast<FARPROC*>(mem + 0x40) = GetProcAddress(LoadLibraryA("kernel32.dll"), "AcquireSRWLockShared");
	*reinterpret_cast<FARPROC*>(mem + 0x44) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetModuleFileNameA");
	*reinterpret_cast<FARPROC*>(mem + 0x48) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetModuleHandleExA");
	*reinterpret_cast<FARPROC*>(mem + 0x4C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "AddVectoredExceptionHandler");
	*reinterpret_cast<FARPROC*>(mem + 0x50) = GetProcAddress(LoadLibraryA("kernel32.dll"), "lstrcpyA");
	*reinterpret_cast<FARPROC*>(mem + 0x54) = GetProcAddress(LoadLibraryA("kernel32.dll"), "InitializeCriticalSection");
	*reinterpret_cast<FARPROC*>(mem + 0x58) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LeaveCriticalSection");
	*reinterpret_cast<FARPROC*>(mem + 0x5C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "EnterCriticalSection");
	*reinterpret_cast<FARPROC*>(mem + 0x60) = GetProcAddress(LoadLibraryA("kernel32.dll"), "QueryPerformanceCounter");
	*reinterpret_cast<FARPROC*>(mem + 0x64) = GetProcAddress(LoadLibraryA("kernel32.dll"), "QueryPerformanceFrequency");
	*reinterpret_cast<FARPROC*>(mem + 0x68) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LoadLibraryW");
	*reinterpret_cast<FARPROC*>(mem + 0x6C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ReleaseSRWLockExclusive");
	*reinterpret_cast<FARPROC*>(mem + 0x70) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GlobalLock");
	*reinterpret_cast<FARPROC*>(mem + 0x74) = GetProcAddress(LoadLibraryA("kernel32.dll"), "InitializeCriticalSectionEx");
	*reinterpret_cast<FARPROC*>(mem + 0x78) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TryEnterCriticalSection");
	*reinterpret_cast<FARPROC*>(mem + 0x7C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCurrentThreadId");
	*reinterpret_cast<FARPROC*>(mem + 0x80) = GetProcAddress(LoadLibraryA("kernel32.dll"), "WideCharToMultiByte");
	*reinterpret_cast<FARPROC*>(mem + 0x84) = GetProcAddress(LoadLibraryA("kernel32.dll"), "WaitForSingleObjectEx");
	*reinterpret_cast<FARPROC*>(mem + 0x88) = GetProcAddress(LoadLibraryA("kernel32.dll"), "Sleep");
	*reinterpret_cast<FARPROC*>(mem + 0x8C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "InitOnceComplete");
	*reinterpret_cast<FARPROC*>(mem + 0x90) = GetProcAddress(LoadLibraryA("kernel32.dll"), "InitOnceBeginInitialize");
	*reinterpret_cast<FARPROC*>(mem + 0x94) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetSystemTimeAsFileTime");
	*reinterpret_cast<FARPROC*>(mem + 0x98) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetModuleHandleW");
	*reinterpret_cast<FARPROC*>(mem + 0x9C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetProcAddress");
	*reinterpret_cast<FARPROC*>(mem + 0xA0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "EncodePointer");
	*reinterpret_cast<FARPROC*>(mem + 0xA4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "DecodePointer");
	*reinterpret_cast<FARPROC*>(mem + 0xA8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LocalFree");
	*reinterpret_cast<FARPROC*>(mem + 0xAC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "MultiByteToWideChar");
	*reinterpret_cast<FARPROC*>(mem + 0xB0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LCMapStringEx");
	*reinterpret_cast<FARPROC*>(mem + 0xB4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetStringTypeW");
	*reinterpret_cast<FARPROC*>(mem + 0xB8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCPInfo");
	*reinterpret_cast<FARPROC*>(mem + 0xBC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "HeapCreate");
	*reinterpret_cast<FARPROC*>(mem + 0xC0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "HeapDestroy");
	*reinterpret_cast<FARPROC*>(mem + 0xC4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "HeapAlloc");
	*reinterpret_cast<FARPROC*>(mem + 0xC8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "HeapReAlloc");
	*reinterpret_cast<FARPROC*>(mem + 0xCC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "HeapFree");
	*reinterpret_cast<FARPROC*>(mem + 0xD0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCurrentProcess");
	*reinterpret_cast<FARPROC*>(mem + 0xD4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCurrentProcessId");
	*reinterpret_cast<FARPROC*>(mem + 0xD8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "OpenThread");
	*reinterpret_cast<FARPROC*>(mem + 0xDC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SuspendThread");
	*reinterpret_cast<FARPROC*>(mem + 0xE0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ResumeThread");
	*reinterpret_cast<FARPROC*>(mem + 0xE4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetThreadContext");
	*reinterpret_cast<FARPROC*>(mem + 0xE8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetThreadContext");
	*reinterpret_cast<FARPROC*>(mem + 0xEC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FlushInstructionCache");
	*reinterpret_cast<FARPROC*>(mem + 0xF0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "VirtualProtect");
	*reinterpret_cast<FARPROC*>(mem + 0xF4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateToolhelp32Snapshot");
	*reinterpret_cast<FARPROC*>(mem + 0xF8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "Thread32First");
	*reinterpret_cast<FARPROC*>(mem + 0xFC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "Thread32Next");
	*reinterpret_cast<FARPROC*>(mem + 0x100) = GetProcAddress(LoadLibraryA("kernel32.dll"), "VirtualAlloc");
	*reinterpret_cast<FARPROC*>(mem + 0x104) = GetProcAddress(LoadLibraryA("kernel32.dll"), "VirtualFree");
	*reinterpret_cast<FARPROC*>(mem + 0x108) = GetProcAddress(LoadLibraryA("kernel32.dll"), "VirtualQuery");
	*reinterpret_cast<FARPROC*>(mem + 0x10C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "InitializeCriticalSectionAndSpinCount");
	*reinterpret_cast<FARPROC*>(mem + 0x110) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetEvent");
	*reinterpret_cast<FARPROC*>(mem + 0x114) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ResetEvent");
	*reinterpret_cast<FARPROC*>(mem + 0x118) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateEventW");
	*reinterpret_cast<FARPROC*>(mem + 0x11C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "UnhandledExceptionFilter");
	*reinterpret_cast<FARPROC*>(mem + 0x120) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetUnhandledExceptionFilter");
	*reinterpret_cast<FARPROC*>(mem + 0x124) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TerminateProcess");
	*reinterpret_cast<FARPROC*>(mem + 0x128) = GetProcAddress(LoadLibraryA("kernel32.dll"), "IsProcessorFeaturePresent");
	*reinterpret_cast<FARPROC*>(mem + 0x12C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "IsDebuggerPresent");
	*reinterpret_cast<FARPROC*>(mem + 0x130) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetStartupInfoW");
	*reinterpret_cast<FARPROC*>(mem + 0x134) = GetProcAddress(LoadLibraryA("kernel32.dll"), "InitializeSListHead");
	*reinterpret_cast<FARPROC*>(mem + 0x138) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetLastError");
	*reinterpret_cast<FARPROC*>(mem + 0x13C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FindClose");
	*reinterpret_cast<FARPROC*>(mem + 0x140) = GetProcAddress(LoadLibraryA("kernel32.dll"), "RaiseException");
	*reinterpret_cast<FARPROC*>(mem + 0x144) = GetProcAddress(LoadLibraryA("kernel32.dll"), "RtlUnwind");
	*reinterpret_cast<FARPROC*>(mem + 0x148) = GetProcAddress(LoadLibraryA("kernel32.dll"), "InterlockedFlushSList");
	*reinterpret_cast<FARPROC*>(mem + 0x14C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetLastError");
	*reinterpret_cast<FARPROC*>(mem + 0x150) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TlsAlloc");
	*reinterpret_cast<FARPROC*>(mem + 0x154) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TlsGetValue");
	*reinterpret_cast<FARPROC*>(mem + 0x158) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TlsSetValue");
	*reinterpret_cast<FARPROC*>(mem + 0x15C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TlsFree");
	*reinterpret_cast<FARPROC*>(mem + 0x160) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FreeLibrary");
	*reinterpret_cast<FARPROC*>(mem + 0x164) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LoadLibraryExW");
	*reinterpret_cast<FARPROC*>(mem + 0x168) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ReadFile");
	*reinterpret_cast<FARPROC*>(mem + 0x16C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateThread");
	*reinterpret_cast<FARPROC*>(mem + 0x170) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ExitThread");
	*reinterpret_cast<FARPROC*>(mem + 0x174) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FreeLibraryAndExitThread");
	*reinterpret_cast<FARPROC*>(mem + 0x178) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetModuleHandleExW");
	*reinterpret_cast<FARPROC*>(mem + 0x17C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ExitProcess");
	*reinterpret_cast<FARPROC*>(mem + 0x180) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetModuleFileNameW");
	*reinterpret_cast<FARPROC*>(mem + 0x184) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateFileW");
	*reinterpret_cast<FARPROC*>(mem + 0x188) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetFileType");
	*reinterpret_cast<FARPROC*>(mem + 0x18C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetFilePointerEx");
	*reinterpret_cast<FARPROC*>(mem + 0x190) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetConsoleMode");
	*reinterpret_cast<FARPROC*>(mem + 0x194) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ReadConsoleW");
	*reinterpret_cast<FARPROC*>(mem + 0x198) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetStdHandle");
	*reinterpret_cast<FARPROC*>(mem + 0x19C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetDateFormatW");
	*reinterpret_cast<FARPROC*>(mem + 0x1A0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetTimeFormatW");
	*reinterpret_cast<FARPROC*>(mem + 0x1A4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CompareStringW");
	*reinterpret_cast<FARPROC*>(mem + 0x1A8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LCMapStringW");
	*reinterpret_cast<FARPROC*>(mem + 0x1AC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetLocaleInfoW");
	*reinterpret_cast<FARPROC*>(mem + 0x1B0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "IsValidLocale");
	*reinterpret_cast<FARPROC*>(mem + 0x1B4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetUserDefaultLCID");
	*reinterpret_cast<FARPROC*>(mem + 0x1B8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "EnumSystemLocalesW");
	*reinterpret_cast<FARPROC*>(mem + 0x1BC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FlushFileBuffers");
	*reinterpret_cast<FARPROC*>(mem + 0x1C0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "WriteFile");
	*reinterpret_cast<FARPROC*>(mem + 0x1C4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetConsoleOutputCP");
	*reinterpret_cast<FARPROC*>(mem + 0x1C8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetFileSizeEx");
	*reinterpret_cast<FARPROC*>(mem + 0x1CC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetTimeZoneInformation");
	*reinterpret_cast<FARPROC*>(mem + 0x1D0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "DeleteFileW");
	*reinterpret_cast<FARPROC*>(mem + 0x1D4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FindFirstFileExW");
	*reinterpret_cast<FARPROC*>(mem + 0x1D8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FindNextFileW");
	*reinterpret_cast<FARPROC*>(mem + 0x1DC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "IsValidCodePage");
	*reinterpret_cast<FARPROC*>(mem + 0x1E0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetACP");
	*reinterpret_cast<FARPROC*>(mem + 0x1E4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetOEMCP");
	*reinterpret_cast<FARPROC*>(mem + 0x1E8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCommandLineA");
	*reinterpret_cast<FARPROC*>(mem + 0x1EC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCommandLineW");
	*reinterpret_cast<FARPROC*>(mem + 0x1F0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetEnvironmentStringsW");
	*reinterpret_cast<FARPROC*>(mem + 0x1F4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FreeEnvironmentStringsW");
	*reinterpret_cast<FARPROC*>(mem + 0x1F8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetEnvironmentVariableW");
	*reinterpret_cast<FARPROC*>(mem + 0x1FC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetProcessHeap");
	*reinterpret_cast<FARPROC*>(mem + 0x200) = GetProcAddress(LoadLibraryA("kernel32.dll"), "HeapSize");
	*reinterpret_cast<FARPROC*>(mem + 0x204) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetStdHandle");
	*reinterpret_cast<FARPROC*>(mem + 0x208) = GetProcAddress(LoadLibraryA("kernel32.dll"), "WriteConsoleW");
	*reinterpret_cast<FARPROC*>(mem + 0x20C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetEndOfFile");
	*reinterpret_cast<FARPROC*>(mem + 0x214) = GetProcAddress(LoadLibraryA("oleaut32.dll"), "SysAllocString");
	*reinterpret_cast<FARPROC*>(mem + 0x218) = GetProcAddress(LoadLibraryA("oleaut32.dll"), "SysFreeString");
	*reinterpret_cast<FARPROC*>(mem + 0x21C) = GetProcAddress(LoadLibraryA("oleaut32.dll"), "VariantClear");
	*reinterpret_cast<FARPROC*>(mem + 0x224) = GetProcAddress(LoadLibraryA("wsock32.dll"), "WSAGetLastError");
	*reinterpret_cast<FARPROC*>(mem + 0x228) = GetProcAddress(LoadLibraryA("ws2_32.dll"), "recv");
	*reinterpret_cast<FARPROC*>(mem + 0x22C) = GetProcAddress(LoadLibraryA("wsock32.dll"), "send");
	*reinterpret_cast<FARPROC*>(mem + 0x230) = GetProcAddress(LoadLibraryA("wsock32.dll"), "closesocket");
}

/*

void fix_imports()
{
	*reinterpret_cast<FARPROC*>(0x3745A02C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateSemaphoreA");
	*reinterpret_cast<FARPROC*>(0x3745A030) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlInitializeConditionVariable");
	*reinterpret_cast<FARPROC*>(0x3745A03C) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlReleaseSRWLockShared");
	*reinterpret_cast<FARPROC*>(0x3745A040) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlAcquireSRWLockShared");
	*reinterpret_cast<FARPROC*>(0x3745A074) = GetProcAddress(LoadLibraryA("kernel32.dll"), "InitializeCriticalSectionEx");
	*reinterpret_cast<FARPROC*>(0x3745A078) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlTryEnterCriticalSection");
	*reinterpret_cast<FARPROC*>(0x3745A0A8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LocalFree");
	*reinterpret_cast<FARPROC*>(0x3745A0BC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "HeapCreate");
	*reinterpret_cast<FARPROC*>(0x3745A0C0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "HeapDestroy");
	*reinterpret_cast<FARPROC*>(0x3745A118) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateEventW");
	*reinterpret_cast<FARPROC*>(0x3745A130) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetStartupInfoW");
	*reinterpret_cast<FARPROC*>(0x3745A198) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetStdHandle");
	*reinterpret_cast<FARPROC*>(0x3745A1E8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCommandLineA");
	*reinterpret_cast<FARPROC*>(0x3745A1EC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCommandLineW");
	*reinterpret_cast<FARPROC*>(0x3745A1FC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetProcessHeap");
	*reinterpret_cast<FARPROC*>(0x3745A21C) = GetProcAddress(LoadLibraryA("oleaut32.dll"), "VariantClear");

	*reinterpret_cast<FARPROC*>(0x3745A000) = GetProcAddress(LoadLibraryA("advapi32.dll"), "CryptAcquireContextW"); //  37D60000h
	*reinterpret_cast<FARPROC*>(0x3745A004) = GetProcAddress(LoadLibraryA("advapi32.dll"), "CryptGenRandom"); //  37D70000h    ; DATA XREF: sub_373D13C0+99↑r
	*reinterpret_cast<FARPROC*>(0x3745A008) = GetProcAddress(LoadLibraryA("advapi32.dll"), "CryptReleaseContext"); //  37D80000h
	*reinterpret_cast<FARPROC*>(0x3745A010) = GetProcAddress(LoadLibraryA("imm32.dll"), "ImmSetCompositionWindow"); //  37D30000h
	*reinterpret_cast<FARPROC*>(0x3745A014) = GetProcAddress(LoadLibraryA("imm32.dll"), "ImmReleaseContext"); //  37D40000h    ; DATA XREF: seg000:372C83BE↑r
	*reinterpret_cast<FARPROC*>(0x3745A018) = GetProcAddress(LoadLibraryA("imm32.dll"), "ImmGetContext"); //  37D50000h        ; DATA XREF: seg000:372C8392↑r
	*reinterpret_cast<FARPROC*>(0x3745A020) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ReleaseSemaphore"); //  37540000h  ; DATA XREF: sub_372F95E0+1BB↑r
	*reinterpret_cast<FARPROC*>(0x3745A024) = GetProcAddress(LoadLibraryA("kernel32.dll"), "WaitForSingleObject"); //  37550000h
	*reinterpret_cast<FARPROC*>(0x3745A028) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CloseHandle"); //  37560000h       ; DATA XREF: sub_373D4780+6↑r
	*reinterpret_cast<FARPROC*>(0x3745A034) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlDeleteCriticalSection"); //  37590000h
	*reinterpret_cast<FARPROC*>(0x3745A038) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlAcquireSRWLockExclusive"); //  375A0000h
	*reinterpret_cast<FARPROC*>(0x3745A044) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetModuleFileNameA"); //  375D0000h
	*reinterpret_cast<FARPROC*>(0x3745A048) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetModuleHandleExA"); //  375E0000h
	*reinterpret_cast<FARPROC*>(0x3745A04C) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlAddVectoredExceptionHandler"); //  375F0000h
	*reinterpret_cast<FARPROC*>(0x3745A050) = GetProcAddress(LoadLibraryA("kernel32.dll"), "lstrcpyA"); //  37600000h          ; DATA XREF: sub_3734B2B0+22A↑r
	*reinterpret_cast<FARPROC*>(0x3745A054) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlInitializeCriticalSection"); //  37610000h
	*reinterpret_cast<FARPROC*>(0x3745A058) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlLeaveCriticalSection"); //  37620000h
	*reinterpret_cast<FARPROC*>(0x3745A05C) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlEnterCriticalSection"); //  37630000h
	*reinterpret_cast<FARPROC*>(0x3745A060) = GetProcAddress(LoadLibraryA("kernel32.dll"), "QueryPerformanceCounter"); //  37640000h
	*reinterpret_cast<FARPROC*>(0x3745A064) = GetProcAddress(LoadLibraryA("kernel32.dll"), "QueryPerformanceFrequency"); //  37650000h
	*reinterpret_cast<FARPROC*>(0x3745A068) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LoadLibraryW"); //  37660000h      ; DATA XREF: sub_37316060+124↑r
	*reinterpret_cast<FARPROC*>(0x3745A06C) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlReleaseSRWLockExclusive"); //  37670000h
	*reinterpret_cast<FARPROC*>(0x3745A070) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GlobalLock"); //  37680000h        ; DATA XREF: seg000:372C7F6C↑r
	*reinterpret_cast<FARPROC*>(0x3745A07C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCurrentThreadId"); //  376B0000h
	*reinterpret_cast<FARPROC*>(0x3745A080) = GetProcAddress(LoadLibraryA("kernel32.dll"), "WideCharToMultiByte"); //  376C0000h
	*reinterpret_cast<FARPROC*>(0x3745A084) = GetProcAddress(LoadLibraryA("kernel32.dll"), "WaitForSingleObjectEx"); //  376D0000h
	*reinterpret_cast<FARPROC*>(0x3745A088) = GetProcAddress(LoadLibraryA("kernel32.dll"), "Sleep"); //  376E0000h            ; DATA XREF: sub_373D479E+2E↑r
	*reinterpret_cast<FARPROC*>(0x3745A08C) = GetProcAddress(LoadLibraryA("kernelbase.dll"), "InitOnceComplete"); //  376F0000h
	*reinterpret_cast<FARPROC*>(0x3745A090) = GetProcAddress(LoadLibraryA("kernelbase.dll"), "InitOnceBeginInitialize"); //  37700000h
	*reinterpret_cast<FARPROC*>(0x3745A094) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetSystemTimeAsFileTime"); //  37710000h
	*reinterpret_cast<FARPROC*>(0x3745A098) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetModuleHandleW"); //  37720000h  ; DATA XREF: sub_3743B30B+2↑r
	*reinterpret_cast<FARPROC*>(0x3745A09C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetProcAddress"); //  37730000h    ; DATA XREF: sub_37431F53+8D↑r
	*reinterpret_cast<FARPROC*>(0x3745A0A0) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlEncodePointer"); //  37740000h     ; DATA XREF: sub_373D4C71+13↑r
	*reinterpret_cast<FARPROC*>(0x3745A0A4) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlDecodePointer"); //  37750000h     ; DATA XREF: sub_37446B2E+19↑r
	*reinterpret_cast<FARPROC*>(0x3745A0AC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "MultiByteToWideChar"); //  37770000h
	*reinterpret_cast<FARPROC*>(0x3745A0B0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LCMapStringEx"); //  37780000h     ; DATA XREF: sub_373D4CB9+D1↑r
	*reinterpret_cast<FARPROC*>(0x3745A0B4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetStringTypeW"); //  37790000h    ; DATA XREF: sub_3744929B+D0↑r
	*reinterpret_cast<FARPROC*>(0x3745A0B8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCPInfo"); //  377A0000h          ; DATA XREF: sub_3744B22D+32↑r
	*reinterpret_cast<FARPROC*>(0x3745A0C4) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlAllocateHeap"); //  377D0000h      ; DATA XREF: sub_373D4ED0+2A↑r
	*reinterpret_cast<FARPROC*>(0x3745A0C8) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlReAllocateHeap"); //  377E0000h    ; DATA XREF: sub_373D4ED0+6C↑r
	*reinterpret_cast<FARPROC*>(0x3745A0CC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "HeapFree"); //  377F0000h          ; DATA XREF: sub_373D5B10+6E↑r
	*reinterpret_cast<FARPROC*>(0x3745A0D0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCurrentProcess"); //  37800000h ; DATA XREF: sub_373D5190+116↑r
	*reinterpret_cast<FARPROC*>(0x3745A0D4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetCurrentProcessId"); //  37810000h
	*reinterpret_cast<FARPROC*>(0x3745A0D8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "OpenThread"); //  37820000h        ; DATA XREF: sub_373D55C0+64↑r
	*reinterpret_cast<FARPROC*>(0x3745A0DC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SuspendThread"); //  37830000h     ; DATA XREF: sub_373D55C0+77↑r
	*reinterpret_cast<FARPROC*>(0x3745A0E0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ResumeThread"); //  37840000h      ; DATA XREF: sub_373D5B10+4E↑r
	*reinterpret_cast<FARPROC*>(0x3745A0E4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetThreadContext"); //  37850000h  ; DATA XREF: sub_373D5990+34↑r
	*reinterpret_cast<FARPROC*>(0x3745A0E8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetThreadContext"); //  37860000h  ; DATA XREF: sub_373D5990+167↑r
	*reinterpret_cast<FARPROC*>(0x3745A0EC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FlushInstructionCache"); //  37870000h
	*reinterpret_cast<FARPROC*>(0x3745A0F0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "VirtualProtect"); //  37880000h    ; DATA XREF: sub_373D5190+5C↑r
	*reinterpret_cast<FARPROC*>(0x3745A0F4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateToolhelp32Snapshot"); //  37890000h
	*reinterpret_cast<FARPROC*>(0x3745A0F8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "Thread32First"); //  378A0000h     ; DATA XREF: j_*reinterpret_cast<FARPROC*>(0x0x3745A000) = GetProcAddress(LoadLibraryA("kernel32.dll"), "Thread32First↑r
	*reinterpret_cast<FARPROC*>(0x3745A0FC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "Thread32Next"); //  378B0000h      ; DATA XREF: j_*reinterpret_cast<FARPROC*>(0x0x3745A000) = GetProcAddress(LoadLibraryA("kernel32.dll"), "Thread32Next↑r
	*reinterpret_cast<FARPROC*>(0x3745A100) = GetProcAddress(LoadLibraryA("kernel32.dll"), "VirtualAlloc"); //  378C0000h      ; DATA XREF: sub_373D5C90+3C↑r
	*reinterpret_cast<FARPROC*>(0x3745A104) = GetProcAddress(LoadLibraryA("kernel32.dll"), "VirtualFree"); //  378D0000h       ; DATA XREF: sub_373D5BE0+89↑r
	*reinterpret_cast<FARPROC*>(0x3745A108) = GetProcAddress(LoadLibraryA("kernel32.dll"), "VirtualQuery"); //  378E0000h      ; DATA XREF: sub_373D5D50+1A↑r
	*reinterpret_cast<FARPROC*>(0x3745A10C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "InitializeCriticalSectionAndSpinCount"); //  378F0000h
	*reinterpret_cast<FARPROC*>(0x3745A110) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetEvent"); //  37900000h          ; DATA XREF: sub_373D6F6B+BF↑r
	*reinterpret_cast<FARPROC*>(0x3745A114) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ResetEvent"); //  37910000h        ; DATA XREF: sub_373D6F6B+CB↑r
	*reinterpret_cast<FARPROC*>(0x3745A11C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "UnhandledExceptionFilter"); //  37930000h
	*reinterpret_cast<FARPROC*>(0x3745A120) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetUnhandledExceptionFilter"); //  37940000h
	*reinterpret_cast<FARPROC*>(0x3745A124) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TerminateProcess"); //  37950000h  ; DATA XREF: sub_373D7411+20↑r
	*reinterpret_cast<FARPROC*>(0x3745A128) = GetProcAddress(LoadLibraryA("kernel32.dll"), "IsProcessorFeaturePresent"); //  37960000h
	*reinterpret_cast<FARPROC*>(0x3745A12C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "IsDebuggerPresent"); //  37970000h ; DATA XREF: sub_373D7DBC+D8↑r
	*reinterpret_cast<FARPROC*>(0x3745A134) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlInitializeSListHead"); //  37990000h
	*reinterpret_cast<FARPROC*>(0x3745A138) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetLastError"); //  379A0000h      ; DATA XREF: sub_3742DCD0:loc_3742DE17↑r
	*reinterpret_cast<FARPROC*>(0x3745A13C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FindClose"); //  379B0000h         ; DATA XREF: sub_3744AC83+22B↑r
	*reinterpret_cast<FARPROC*>(0x3745A140) = GetProcAddress(LoadLibraryA("kernel32.dll"), "RaiseException"); //  379C0000h    ; DATA XREF: sub_3742E3EB+60↑r
	*reinterpret_cast<FARPROC*>(0x3745A144) = GetProcAddress(LoadLibraryA("kernel32.dll"), "RtlUnwind"); //  379D0000h         ; DATA XREF: sub_37431D20+F↑r
	*reinterpret_cast<FARPROC*>(0x3745A148) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlInterlockedFlushSList"); //  379E0000h
	*reinterpret_cast<FARPROC*>(0x3745A14C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetLastError"); //  379F0000h      ; DATA XREF: sub_37430C85+87↑r
	*reinterpret_cast<FARPROC*>(0x3745A150) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TlsAlloc"); //  37A00000h          ; DATA XREF: sub_3743203E+35↑r
	*reinterpret_cast<FARPROC*>(0x3745A154) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TlsGetValue"); //  37A10000h       ; DATA XREF: sub_374320B4:loc_374320E6↑r
	*reinterpret_cast<FARPROC*>(0x3745A158) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TlsSetValue"); //  37A20000h       ; DATA XREF: sub_374320EF:loc_37432124↑r
	*reinterpret_cast<FARPROC*>(0x3745A15C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "TlsFree"); //  37A30000h           ; DATA XREF: sub_37432079:loc_374320AB↑r
	*reinterpret_cast<FARPROC*>(0x3745A160) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FreeLibrary"); //  37A40000h       ; DATA XREF: sub_37431F53+83↑r
	*reinterpret_cast<FARPROC*>(0x3745A164) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LoadLibraryExW"); //  37A50000h    ; DATA XREF: sub_37431FF3+D↑r
	*reinterpret_cast<FARPROC*>(0x3745A168) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ReadFile"); //  37A60000h          ; DATA XREF: sub_37432663+C7↑r
	*reinterpret_cast<FARPROC*>(0x3745A16C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateThread"); //  37A70000h      ; DATA XREF: sub_3743B05E+49↑r
	*reinterpret_cast<FARPROC*>(0x3745A170) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlExitUserThread"); //  37A80000h    ; DATA XREF: sub_3743AEFF+1A↑r
	*reinterpret_cast<FARPROC*>(0x3745A174) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FreeLibraryAndExitThread"); //  37A90000h
	*reinterpret_cast<FARPROC*>(0x3745A178) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetModuleHandleExW"); //  37AA0000h
	*reinterpret_cast<FARPROC*>(0x3745A17C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ExitProcess"); //  37AB0000h
	*reinterpret_cast<FARPROC*>(0x3745A180) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetModuleFileNameW"); //  37AC0000h
	*reinterpret_cast<FARPROC*>(0x3745A184) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateFileW"); //  37AD0000h       ; DATA XREF: sub_3744F181+1D↑r
	*reinterpret_cast<FARPROC*>(0x3745A188) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetFileType"); //  37AE0000h       ; DATA XREF: sub_3744F4C8+127↑r
	*reinterpret_cast<FARPROC*>(0x3745A18C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetFilePointerEx"); //  37AF0000h  ; DATA XREF: sub_374409C4+39↑r
	*reinterpret_cast<FARPROC*>(0x3745A190) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetConsoleMode"); //  37B00000h    ; DATA XREF: sub_37441113+28B↑r
	*reinterpret_cast<FARPROC*>(0x3745A194) = GetProcAddress(LoadLibraryA("kernel32.dll"), "ReadConsoleW"); //  37B10000h      ; DATA XREF: sub_37441113+2AD↑r
	*reinterpret_cast<FARPROC*>(0x3745A19C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetDateFormatW"); //  37B30000h    ; DATA XREF: sub_37443C08+4C↑r
	*reinterpret_cast<FARPROC*>(0x3745A1A0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetTimeFormatW"); //  37B40000h    ; DATA XREF: sub_37443C9E+3A↑r
	*reinterpret_cast<FARPROC*>(0x3745A1A4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "CompareStringW"); //  37B50000h    ; DATA XREF: sub_37443A58+52↑r
	*reinterpret_cast<FARPROC*>(0x3745A1A8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "LCMapStringW"); //  37B60000h      ; DATA XREF: sub_37443DE1+52↑r
	*reinterpret_cast<FARPROC*>(0x3745A1AC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetLocaleInfoW"); //  37B70000h    ; DATA XREF: sub_37443C5F+34↑r
	*reinterpret_cast<FARPROC*>(0x3745A1B0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "IsValidLocale"); //  37B80000h     ; DATA XREF: sub_37443D6A+2D↑r
	*reinterpret_cast<FARPROC*>(0x3745A1B4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetUserDefaultLCID"); //  37B90000h
	*reinterpret_cast<FARPROC*>(0x3745A1B8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "EnumSystemLocalesW"); //  37BA0000h
	*reinterpret_cast<FARPROC*>(0x3745A1BC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FlushFileBuffers"); //  37BB0000h  ; DATA XREF: sub_37444066+49↑r
	*reinterpret_cast<FARPROC*>(0x3745A1C0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "WriteFile"); //  37BC0000h         ; DATA XREF: sub_37444185+292↑r
	*reinterpret_cast<FARPROC*>(0x3745A1C4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetConsoleOutputCP"); //  37BD0000h
	*reinterpret_cast<FARPROC*>(0x3745A1C8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetFileSizeEx"); //  37BE0000h     ; DATA XREF: sub_374450A3+5F↑r
	*reinterpret_cast<FARPROC*>(0x3745A1CC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetTimeZoneInformation"); //  37BF0000h
	*reinterpret_cast<FARPROC*>(0x3745A1D0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "DeleteFileW"); //  37C00000h       ; DATA XREF: sub_374485EE+8↑r
	*reinterpret_cast<FARPROC*>(0x3745A1D4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FindFirstFileExW"); //  37C10000h  ; DATA XREF: sub_3744AC83+F0↑r
	*reinterpret_cast<FARPROC*>(0x3745A1D8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FindNextFileW"); //  37C20000h     ; DATA XREF: sub_3744AC83+1CE↑r
	*reinterpret_cast<FARPROC*>(0x3745A1DC) = GetProcAddress(LoadLibraryA("kernel32.dll"), "IsValidCodePage"); //  37C30000h   ; DATA XREF: sub_3744B5BC+5E↑r
	*reinterpret_cast<FARPROC*>(0x3745A1E0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetACP"); //  37C40000h            ; DATA XREF: sub_3744B157+42↑r
	*reinterpret_cast<FARPROC*>(0x3745A1E4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetOEMCP"); //  37C50000h          ; DATA XREF: sub_3744B157+2B↑r
	*reinterpret_cast<FARPROC*>(0x3745A1F0) = GetProcAddress(LoadLibraryA("kernel32.dll"), "GetEnvironmentStringsW"); //  37C80000h
	*reinterpret_cast<FARPROC*>(0x3745A1F4) = GetProcAddress(LoadLibraryA("kernel32.dll"), "FreeEnvironmentStringsW"); //  37C90000h
	*reinterpret_cast<FARPROC*>(0x3745A1F8) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetEnvironmentVariableW"); //  37CA0000h
	*reinterpret_cast<FARPROC*>(0x3745A200) = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlSizeHeap"); //  37CC0000h          ; DATA XREF: sub_3744BE4A+2B↑r
	*reinterpret_cast<FARPROC*>(0x3745A204) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetStdHandle"); //  37CD0000h      ; DATA XREF: sub_3744C169:loc_3744C1C8↑r
	*reinterpret_cast<FARPROC*>(0x3745A208) = GetProcAddress(LoadLibraryA("kernel32.dll"), "WriteConsoleW"); //  37CE0000h     ; DATA XREF: sub_37452034+17↑r
	*reinterpret_cast<FARPROC*>(0x3745A20C) = GetProcAddress(LoadLibraryA("kernel32.dll"), "SetEndOfFile"); //  37CF0000h      ; DATA XREF: sub_3745223A+12B↑r
	*reinterpret_cast<FARPROC*>(0x3745A214) = GetProcAddress(LoadLibraryA("oleaut32.dll"), "SysAllocString"); //  37D00000h    ; DATA XREF: sub_3730B700+28↑r
	*reinterpret_cast<FARPROC*>(0x3745A218) = GetProcAddress(LoadLibraryA("oleaut32.dll"), "SysFreeString"); //  37D10000h     ; DATA XREF: sub_3730B760+20↑r
	*reinterpret_cast<FARPROC*>(0x3745A224) = GetProcAddress(LoadLibraryA("ws2_32.dll"), "WSAGetLastError"); //  37D90000h     ; DATA XREF: sub_373D2570:loc_373D2357↑r
	*reinterpret_cast<FARPROC*>(0x3745A228) = GetProcAddress(LoadLibraryA("ws2_32.dll"), "recv"); //  37DA0000h            ; DATA XREF: sub_3739BB70+24E↑r
	*reinterpret_cast<FARPROC*>(0x3745A22C) = GetProcAddress(LoadLibraryA("ws2_32.dll"), "send"); //  37DB0000h            ; DATA XREF: sub_3739BE30:loc_3739BE7F↑r
	*reinterpret_cast<FARPROC*>(0x3745A230) = GetProcAddress(LoadLibraryA("ws2_32.dll"), "closesocket"); //  37DC0000h         ; DATA XREF: sub_3739C4D0+BB↑r
}*/


void fix_relocations(uint32_t allocated_address)
{
	DWORD delta = allocated_address - 0x372b0000;

	for (int i = 0; i < relocations.size(); i++)
	{
		*reinterpret_cast<uint32_t*>(allocated_address + relocations[i]) += delta;
	}
}

SOCKET socket_used_in_cheat = 0;

decltype(&send) oSend;

int PASCAL FAR hooked_send(
	_In_ SOCKET s,
	_In_reads_bytes_(len) const char FAR* buf,
	_In_ int len,
	_In_ int flags)
{
	if (s == socket_used_in_cheat)
	{
		//std::cout << "send" << std::endl;
		return len;
	}
	return oSend(s, buf, len, flags);
}

decltype(&recv) oRecv;

int g_counter = 0;

std::map<int, std::vector<uint8_t>> g_stages = {

	{0, {0x16, 0x3, 0x3, 0x0, 0x7b }},
	{1, {0x2, 0x0, 0x0, 0x77, 0x3, 0x3, 0x3f, 0xb1, 0x3c, 0x9c, 0x26, 0xa8, 0x21, 0x4d, 0x60, 0xc5, 0x91, 0x3d, 0x58, 0x40, 0x5e, 0xb3, 0x41, 0x6f, 0xf3, 0x59, 0x19, 0x1a, 0x63, 0x27, 0xce, 0xd4, 0xbe, 0x2e, 0x10, 0xd1, 0x72, 0x84, 0x0, 0x13, 0x1, 0x0, 0x0, 0x4f, 0x0, 0x2b, 0x0, 0x2, 0x3, 0x4, 0x0, 0x33, 0x0, 0x45, 0x0, 0x17, 0x0, 0x41, 0x4, 0xd6, 0xb3, 0x93, 0xcf, 0xc8, 0xb3, 0xa8, 0xd, 0x58, 0x5e, 0xbb, 0x42, 0x6d, 0xb3, 0x4d, 0x68, 0x16, 0x65, 0xf1, 0xb3, 0xfa, 0x46, 0x9, 0x6a, 0x27, 0x2d, 0x24, 0x6a, 0x7, 0x13, 0xbe, 0x74, 0x52, 0x7c, 0xf4, 0xa3, 0x64, 0xc8, 0x78, 0x14, 0x85, 0xfc, 0x50, 0x45, 0x44, 0xb4, 0xd8, 0xee, 0x42, 0xc4, 0xc1, 0xe7, 0x57, 0xd0, 0x4, 0x2d, 0xb, 0xf4, 0xcd, 0x9a, 0x2b, 0xc8, 0x3c, 0x3a}},
	{2, {0x14, 0x3, 0x3, 0x0, 0x1}},
	{3, {0x1}},
	{4, {0x17, 0x3, 0x3, 0x0, 0x31}},
	{5, {0x8c, 0x4b, 0x35, 0x2, 0xf2, 0xd5, 0xbe, 0x8, 0xda, 0x3d, 0xa2, 0x5f, 0x9d, 0x1e, 0x13, 0xe2, 0xc0, 0xc5, 0x58, 0x31, 0xed, 0x58, 0xb1, 0x2, 0xe0, 0x73, 0xf2, 0x40, 0x11, 0x3a, 0x17, 0x1a, 0x1e, 0x62, 0xbb, 0x6, 0x2b, 0x68, 0x61, 0xa3, 0x8c, 0x9c, 0x44, 0xb5, 0xa1, 0xf6, 0x70, 0x58, 0xad}},
	{6, {0x17, 0x3, 0x3, 0xf, 0xc3}},
	{7, {0x8b, 0x49, 0x37, 0xbd, 0x4a, 0x1e, 0x66, 0x3a, 0x60, 0x40, 0x8a, 0x45, 0x8a, 0x1a, 0xc9, 0x42, 0xd3, 0xd0, 0x11, 0x20, 0xa9, 0x32, 0xb, 0xb0, 0x45, 0x17, 0xf1, 0xb5, 0x14, 0xf5, 0xfa, 0xa2, 0xfc, 0xa9, 0x26, 0xd6, 0x3b, 0x36, 0xe3, 0xda, 0xf, 0xde, 0x55, 0x7a, 0x23, 0x19, 0x7f, 0xb8, 0x18, 0xb0, 0x43, 0x97, 0x32, 0x4c, 0xcd, 0x48, 0x1, 0xce, 0x9b, 0x99, 0x28, 0x28, 0x78, 0x9e, 0x29, 0xfd, 0x5b, 0x96, 0xaf, 0x39, 0x66, 0x26, 0x3c, 0x67, 0xc, 0x79, 0x34, 0x22, 0x99, 0xbb, 0x2d, 0x4d, 0xa3, 0x1a, 0x4e, 0x66, 0xa8, 0x98, 0xe, 0x4c, 0xdb, 0x9c, 0x71, 0x45, 0x6e, 0xb3, 0xd0, 0x7b, 0xae, 0xa, 0x5a, 0x5a, 0x2a, 0xb, 0x42, 0x30, 0xeb, 0xf9, 0x27, 0xae, 0xf6, 0x2a, 0xbf, 0x9f, 0x18, 0x34, 0xb3, 0xd8, 0x73, 0xcf, 0x88, 0x43, 0x16, 0xfa, 0xb, 0xf9, 0xa4, 0x95, 0xb4, 0xad, 0x39, 0xab, 0x3f, 0x22, 0x56, 0x9f, 0xfd, 0x33, 0xba, 0x9a, 0x7d, 0x26, 0xeb, 0x8f, 0xd8, 0x55, 0xa6, 0xf, 0xda, 0x5a, 0x19, 0xd9, 0x53, 0xea, 0x1f, 0x86, 0x89, 0x4d, 0x51, 0x89, 0x84, 0x7, 0x66, 0x7a, 0x8e, 0xa6, 0x97, 0x37, 0xbc, 0x85, 0xd, 0xa4, 0xe6, 0x76, 0x76, 0xbf, 0x78, 0x59, 0xf9, 0xe8, 0xaa, 0x86, 0x73, 0xf2, 0x60, 0x39, 0x44, 0xd4, 0x2, 0x42, 0xd6, 0xd1, 0x6e, 0xcd, 0xac, 0x23, 0x78, 0x71, 0x2c, 0x91, 0xfd, 0x9, 0xb7, 0x65, 0x6a, 0x1b, 0x5a, 0xf8, 0x40, 0x7f, 0x56, 0x98, 0x30, 0xc1, 0x30, 0x72, 0x8a, 0x4b, 0x7a, 0xf3, 0x87, 0xb2, 0xdb, 0x19, 0xa6, 0xcd, 0xdf, 0x5b, 0xd8, 0x3, 0x30, 0xd1, 0xb2, 0x22, 0x88, 0x2c, 0x22, 0x1, 0xd2, 0x9, 0xb1, 0x5, 0xa3, 0xb, 0xdd, 0xf0, 0x24, 0x25, 0x3e, 0x41, 0x3d, 0xdf, 0x8b, 0x94, 0xac, 0x41, 0x8e, 0x94, 0xac, 0x4a, 0x54, 0xe2, 0xc, 0xe1, 0xec, 0x14, 0xb8, 0x9e, 0xa, 0x8f, 0x30, 0x4b, 0x8b, 0x70, 0xac, 0xaa, 0xc7, 0xfd, 0x17, 0x52, 0xa9, 0x4f, 0xd8, 0x1, 0x13, 0xe0, 0x4d, 0xcb, 0x77, 0xd5, 0x23, 0x21, 0x55, 0xd6, 0xc1, 0xfe, 0x41, 0xce, 0xbb, 0x4e, 0x2c, 0xe6, 0x8e, 0x74, 0xc6, 0x7d, 0x28, 0xb1, 0x11, 0x51, 0x6f, 0x6, 0xf, 0xf4, 0x85, 0x53, 0x1f, 0xd2, 0x87, 0xc6, 0xf0, 0x45, 0x1b, 0xe7, 0x48, 0x68, 0xc0, 0x60, 0xf1, 0x49, 0x8e, 0x18, 0x43, 0x9c, 0x2f, 0x93, 0x16, 0x2f, 0xc4, 0xb2, 0x74, 0x38, 0xc6, 0x14, 0xd8, 0xeb, 0x8b, 0xcf, 0x36, 0x5a, 0xde, 0x53, 0x48, 0xf3, 0x94, 0xfb, 0xf, 0x5f, 0x76, 0x1f, 0x94, 0xea, 0xbc, 0x64, 0xad, 0x8b, 0x2f, 0x76, 0xaa, 0xc8, 0xa0, 0x70, 0xb3, 0xa9, 0x6b, 0x9a, 0x69, 0xa1, 0x1b, 0x9d, 0xe6, 0x56, 0xac, 0xe2, 0x60, 0x4a, 0xd4, 0x3c, 0x84, 0x9d, 0x59, 0x47, 0x9b, 0xf3, 0xec, 0x8a, 0xc9, 0xf8, 0xc5, 0x70, 0xd9, 0x27, 0xe6, 0x52, 0x9e, 0x2c, 0x92, 0x12, 0xee, 0x7, 0x1e, 0x3c, 0x22, 0xd6, 0x96, 0x14, 0xd4, 0x4, 0x24, 0x60, 0x73, 0x4a, 0xc7, 0xb4, 0x37, 0x9e, 0x7f, 0x30, 0x68, 0x3b, 0xfe, 0x1a, 0x12, 0x5c, 0x4, 0x7, 0x5, 0x13, 0x2a, 0x98, 0x78, 0xce, 0xcd, 0xa4, 0xd1, 0x21, 0xb3, 0xdf, 0xef, 0x39, 0x10, 0xe, 0x1b, 0x73, 0xbb, 0xc1, 0xaf, 0xfd, 0x98, 0xdc, 0x97, 0x58, 0xc1, 0x82, 0xef, 0xba, 0x70, 0x42, 0x9c, 0xc8, 0xb0, 0x7a, 0x5c, 0x46, 0x4a, 0x4f, 0x62, 0x3c, 0x5f, 0x2d, 0x5a, 0x3, 0x75, 0x1d, 0x8e, 0xb, 0x79, 0x93, 0x2f, 0x28, 0xde, 0x8f, 0x58, 0xe6, 0x53, 0x64, 0xa7, 0x69, 0x8, 0x97, 0x28, 0x5b, 0x8, 0x57, 0xb4, 0x90, 0x2b, 0xe0, 0xe7, 0x4d, 0x57, 0xf4, 0xfa, 0x24, 0x99, 0xe5, 0x5a, 0x88, 0xab, 0xab, 0x27, 0x1b, 0xbb, 0xac, 0xde, 0x1b, 0x42, 0xb1, 0xcb, 0xc5, 0xc4, 0xe0, 0x82, 0x99, 0x1e, 0x90, 0x1, 0x3f, 0x12, 0xf8, 0x1c, 0x61, 0x69, 0x41, 0x24, 0x43, 0xe8, 0x3d, 0x5d, 0xab, 0xa5, 0x43, 0x51, 0x8b, 0xe0, 0x4d, 0x73, 0x7a, 0x9e, 0x5d, 0xb7, 0x16, 0x95, 0x4f, 0x8a, 0x9d, 0xc9, 0x57, 0x3f, 0x69, 0xce, 0x14, 0xf9, 0x16, 0x3c, 0x78, 0x13, 0xbd, 0x37, 0xf9, 0x6e, 0x58, 0xf3, 0x2c, 0x9c, 0xcc, 0xec, 0x7b, 0x50, 0x2a, 0xc, 0xf5, 0xf9, 0x5c, 0xf8, 0x39, 0x62, 0xc7, 0xf4, 0x2a, 0xf2, 0xa, 0xe9, 0x72, 0x8f, 0xaa, 0xc6, 0xa5, 0x46, 0xc, 0xe8, 0x5f, 0xc1, 0xaf, 0x61, 0x81, 0x71, 0x29, 0xd9, 0x5a, 0x92, 0x17, 0x7c, 0xda, 0x8c, 0x6b, 0x9d, 0xa8, 0xa4, 0xc1, 0x1d, 0x64, 0xcf, 0x83, 0x19, 0x71, 0xfa, 0x65, 0xb6, 0x6f, 0x23, 0xa4, 0x2e, 0x9, 0xfa, 0xfb, 0x15, 0x1c, 0x2c, 0x39, 0x4a, 0xa3, 0x30, 0xc9, 0xfa, 0xf3, 0x73, 0xfd, 0xe3, 0x9e, 0x24, 0x39, 0x41, 0xaa, 0xb9, 0x26, 0x2e, 0xaa, 0x79, 0x1e, 0xe, 0xa1, 0xd4, 0xae, 0x97, 0x63, 0x52, 0x64, 0x57, 0x1f, 0xf8, 0x38, 0xbc, 0x82, 0xc0, 0x4a, 0xf4, 0x26, 0x43, 0x19, 0xb7, 0xca, 0xd4, 0x1, 0x67, 0x9e, 0xb9, 0xd5, 0x2, 0x45, 0x9f, 0x53, 0xea, 0xcc, 0x92, 0xed, 0xf0, 0x7e, 0xd6, 0xed, 0x31, 0x86, 0x6, 0x49, 0x7e, 0xa4, 0x7e, 0x9e, 0x1a, 0x21, 0x1d, 0xde, 0xe4, 0xef, 0xe, 0x1b, 0x83, 0xc, 0x4e, 0xca, 0x13, 0x13, 0x31, 0x98, 0x51, 0x1, 0x73, 0x85, 0xab, 0x8d, 0x8a, 0x75, 0x72, 0x2f, 0xc0, 0x49, 0x73, 0xcc, 0x4f, 0xb7, 0x75, 0xe4, 0x3c, 0x1d, 0xdf, 0xae, 0xba, 0x8e, 0x9f, 0x20, 0xd2, 0xe2, 0x9c, 0x6b, 0x20, 0xd5, 0x5e, 0xab, 0xb7, 0x62, 0x7, 0x23, 0x83, 0x71, 0x3b, 0x52, 0x8e, 0x5a, 0x8f, 0xb2, 0x13, 0xff, 0x6a, 0x1f, 0xd, 0x95, 0x7, 0x8f, 0xe, 0x9b, 0xe4, 0x3f, 0xb0, 0x4e, 0xc, 0x0, 0xb1, 0x8f, 0x9a, 0x65, 0x3, 0xac, 0x15, 0x70, 0x68, 0x71, 0x29, 0x3e, 0x5c, 0x12, 0x4c, 0x7a, 0xdb, 0x98, 0x52, 0xd3, 0x85, 0xda, 0xf9, 0x45, 0xbf, 0xa4, 0x8d, 0xdb, 0xc4, 0xe4, 0x59, 0xd7, 0xc9, 0x6b, 0xf0, 0xeb, 0x19, 0x30, 0x2d, 0x2c, 0x41, 0x13, 0x74, 0x6c, 0x59, 0x19, 0xf2, 0x8a, 0xdc, 0x8e, 0x6b, 0xfb, 0xd, 0xbf, 0xdf, 0x7c, 0x5b, 0x87, 0xc5, 0x85, 0x6d, 0x17, 0xe7, 0xe3, 0xba, 0x28, 0xdb, 0x4e, 0xfa, 0xe4, 0xa2, 0x11, 0x61, 0xd6, 0xb1, 0x7e, 0x12, 0x31, 0x99, 0x15, 0x91, 0x29, 0xa7, 0xa2, 0x9f, 0x1c, 0x37, 0xff, 0xb, 0xe9, 0x51, 0xdf, 0x27, 0x1a, 0xfc, 0x26, 0x34, 0x45, 0x86, 0x4d, 0x68, 0xae, 0x99, 0x13, 0xa8, 0xb0, 0x4a, 0x5f, 0xfa, 0xce, 0xa7, 0xdc, 0x96, 0x61, 0xfd, 0x94, 0x74, 0xd5, 0xaf, 0xc7, 0x7a, 0xa2, 0xe0, 0xd1, 0x7f, 0x64, 0xa7, 0x33, 0x52, 0xfd, 0xee, 0x3b, 0x5c, 0xd5, 0x26, 0xc4, 0xc7, 0x61, 0x3c, 0xc1, 0xe3, 0x75, 0x81, 0x99, 0xe9, 0xad, 0xb9, 0x9e, 0x7b, 0xf3, 0xe1, 0x4c, 0x89, 0xf4, 0x8b, 0x95, 0x64, 0x14, 0xbe, 0xf9, 0xf9, 0x7c, 0x94, 0x18, 0x9b, 0xab, 0x20, 0x45, 0x6c, 0x7c, 0xf7, 0xbd, 0x34, 0xb3, 0xe6, 0xf8, 0xbf, 0x6f, 0x81, 0x18, 0xa4, 0x5a, 0x2e, 0xa4, 0x5e, 0x72, 0xdd, 0x9, 0xe3, 0xc1, 0x12, 0xde, 0xfc, 0x7, 0xbd, 0x14, 0xcf, 0x3e, 0x75, 0xcf, 0x82, 0x27, 0x69, 0xc0, 0x58, 0xf, 0x4c, 0x3, 0x38, 0x86, 0x27, 0x84, 0x1d, 0x5e, 0x11, 0xb1, 0xea, 0xaf, 0x5c, 0x63, 0x89, 0x8f, 0xcb, 0x82, 0x7d, 0x8, 0x78, 0xd6, 0x53, 0x1e, 0x3b, 0x8e, 0x98, 0x94, 0xee, 0x96, 0x5a, 0x20, 0xa4, 0xaf, 0x9d, 0xb1, 0x11, 0xd3, 0x8, 0x71, 0x5d, 0xee, 0x1, 0x59, 0x9f, 0x30, 0xd7, 0x64, 0x96, 0x4a, 0xfe, 0x69, 0x8a, 0x4a, 0x47, 0x7, 0xe3, 0xd0, 0x51, 0x60, 0x0, 0xdd, 0xd3, 0x28, 0x82, 0xea, 0xb3, 0x2b, 0x0, 0x5f, 0xa9, 0x2e, 0x59, 0xeb, 0xf3, 0xea, 0xbe, 0xf2, 0x1a, 0xad, 0xe3, 0x26, 0x66, 0x7e, 0xcd, 0x71, 0x69, 0x39, 0xf4, 0x81, 0x73, 0x0, 0xac, 0xce, 0xb1, 0xb0, 0xde, 0xc5, 0xb5, 0xcf, 0x34, 0xc3, 0x26, 0xc5, 0x29, 0x0, 0xeb, 0xbf, 0x72, 0x2d, 0x48, 0x8f, 0xc3, 0xa3, 0x37, 0x29, 0x12, 0x7b, 0xaf, 0x3a, 0x71, 0x4a, 0x3f, 0x31, 0xd7, 0x91, 0x5d, 0x94, 0x5c, 0x1a, 0x93, 0xb7, 0x88, 0x11, 0x91, 0x66, 0xd4, 0x74, 0xcc, 0x77, 0xd0, 0x77, 0x77, 0x29, 0x81, 0xcd, 0x91, 0xa0, 0xc7, 0x58, 0x9c, 0x7d, 0x3, 0x41, 0x7c, 0xe, 0xb9, 0xab, 0x1d, 0x85, 0xce, 0x2e, 0xe5, 0xca, 0xc3, 0xdf, 0xd3, 0x61, 0xa6, 0x75, 0x56, 0xfb, 0xf5, 0xc9, 0x9b, 0xc0, 0xaa, 0x5d, 0xc8, 0x28, 0x31, 0x85, 0x76, 0xed, 0x96, 0xd7, 0xec, 0x8f, 0x90, 0xf8, 0x2a, 0x9f, 0x9f, 0x9d, 0xc8, 0x3f, 0x10, 0x7, 0xe5, 0xb4, 0x95, 0x67, 0xdd, 0x3a, 0x52, 0x72, 0x95, 0xc1, 0xb4, 0x22, 0xb1, 0x0, 0x90, 0x78, 0x94, 0xc0, 0xfc, 0x2e, 0xee, 0x63, 0xa7, 0x9f, 0x41, 0x5d, 0x1f, 0x70, 0xca, 0x5, 0x71, 0x42, 0x32, 0x16, 0xff, 0x48, 0x39, 0xfa, 0x4, 0x2, 0xea, 0x3a, 0x92, 0xbf, 0x8b, 0xe3, 0x92, 0x79, 0xbb, 0x99, 0xea, 0x6d, 0x47, 0x76, 0x50, 0x3, 0xab, 0x2a, 0x69, 0xd2, 0xb1, 0x62, 0x76, 0xbc, 0x56, 0x34, 0x2f, 0xbf, 0xdb, 0x79, 0x61, 0x7b, 0xd7, 0x4f, 0x95, 0xde, 0x87, 0x59, 0xf, 0xbf, 0x4d, 0x3f, 0x61, 0x5c, 0xf4, 0x56, 0x68, 0x6c, 0x77, 0x75, 0x6, 0x71, 0xb0, 0xc, 0xc2, 0xe5, 0xeb, 0x23, 0x8, 0xd5, 0x2e, 0x60, 0x9b, 0x6c, 0x7f, 0x5d, 0xbe, 0x43, 0x6a, 0x9b, 0xfe, 0xb9, 0x5, 0x81, 0xbb, 0x82, 0xf2, 0xf, 0x3d, 0x72, 0x7, 0x97, 0xc3, 0x89, 0xfa, 0x3e, 0x6c, 0x8c, 0xd3, 0xd8, 0x2f, 0xa6, 0x35, 0x66, 0xe6, 0x32, 0xd5, 0x53, 0xdf, 0xa3, 0xeb, 0x95, 0x68, 0x38, 0x44, 0x69, 0xfa, 0x78, 0x6c, 0x92, 0xd3, 0xb4, 0x70, 0x7b, 0x24, 0x9, 0xea, 0x47, 0x36, 0x8, 0x8b, 0x7e, 0x54, 0x3c, 0xb, 0x8f, 0x99, 0xda, 0x12, 0x16, 0x4f, 0x75, 0xd7, 0xbb, 0x6d, 0xe2, 0xd8, 0x5b, 0x63, 0x1d, 0xfc, 0xc6, 0x27, 0xed, 0x1, 0xcb, 0xe9, 0xaa, 0x6a, 0x43, 0xaf, 0x23, 0xb3, 0x3f, 0xce, 0xa0, 0xa4, 0x98, 0xe1, 0x48, 0x76, 0x76, 0xbc, 0x3f, 0xd8, 0x93, 0xa2, 0xa2, 0x64, 0xad, 0x26, 0x19, 0x5f, 0x2f, 0xcc, 0x2c, 0x9b, 0xe0, 0x72, 0xc, 0xb, 0x8e, 0x87, 0x96, 0xfe, 0x6b, 0x77, 0x9d, 0xe8, 0x12, 0x2a, 0x7f, 0xf6, 0x1f, 0x54, 0xf4, 0xde, 0xcc, 0x74, 0xd5, 0x49, 0xc5, 0x42, 0xed, 0xc7, 0x8f, 0x28, 0x1f, 0xae, 0xc9, 0x37, 0x3a, 0x62, 0xa6, 0x7f, 0x68, 0x79, 0x91, 0xa7, 0x8f, 0x16, 0xc4, 0x3d, 0xe, 0x76, 0x7f, 0xad, 0xff, 0x69, 0x8, 0x22, 0xa4, 0x8b, 0x27, 0xf6, 0x5d, 0x8, 0x8c, 0xb0, 0xc0, 0x52, 0x10, 0xe2, 0x80, 0xe2, 0x4c, 0x9e, 0x61, 0xbf, 0x8c, 0x6e, 0x62, 0x52, 0x68, 0xf, 0xa6, 0xbc, 0xba, 0x6, 0x92, 0x8a, 0x2a, 0xa9, 0xd, 0xf4, 0x1b, 0x27, 0x53, 0x69, 0xe7, 0x94, 0x68, 0x76, 0xe1, 0x33, 0x52, 0x27, 0x86, 0xac, 0x12, 0x98, 0xfd, 0x4f, 0x4d, 0x6f, 0x34, 0x11, 0x40, 0x6a, 0xd4, 0xe6, 0xee, 0x1d, 0x14, 0xa2, 0x64, 0x72, 0x3e, 0xd9, 0xf2, 0x7b, 0xa3, 0x9e, 0xe7, 0x7c, 0xda, 0xec, 0x7b, 0x6, 0xbb, 0x1, 0x9a, 0x9b, 0x29, 0x92, 0x11, 0x75, 0x8a, 0xe3, 0x8c, 0xe, 0xd8, 0xb2, 0x42, 0xa, 0x90, 0xfc, 0xc8, 0xdf, 0x36, 0xb2, 0xc8, 0x72, 0x9d, 0x58, 0x0, 0x97, 0x7e, 0x36, 0x85, 0x27, 0x99, 0x38, 0x6b, 0xcf, 0xf3, 0xfd, 0x11, 0x53, 0x8c, 0x6, 0xfb, 0x23, 0x78, 0xad, 0xff, 0x1f, 0x66, 0x84, 0x66, 0x85, 0x25, 0x55, 0x69, 0xe7, 0x18, 0x6a, 0xe1, 0x15, 0xe0, 0x4e, 0x57, 0xfc, 0xfb, 0xac, 0x77, 0xb, 0x58, 0x35, 0x46, 0x77, 0x12, 0xa8, 0x4f, 0xeb, 0x4b, 0xae, 0x79, 0xe1, 0x31, 0xca, 0x68, 0x37, 0xcb, 0x43, 0x46, 0xfd, 0xfb, 0xd7, 0x9b, 0x30, 0x76, 0x89, 0x58, 0xbd, 0x15, 0xa3, 0x40, 0x5e, 0x43, 0x9f, 0x67, 0x68, 0x55, 0x22, 0x15, 0xdf, 0x31, 0xf0, 0x39, 0x4b, 0xfe, 0xf1, 0x66, 0x73, 0x79, 0x85, 0x63, 0xec, 0x12, 0x50, 0x44, 0x66, 0x2e, 0xc3, 0xec, 0x48, 0xe7, 0x77, 0xd6, 0x5, 0x40, 0xc3, 0x22, 0xd2, 0x11, 0x74, 0x2a, 0x84, 0xa1, 0x55, 0xb4, 0xbb, 0x22, 0x35, 0xec, 0x2d, 0x93, 0xc3, 0x80, 0x77, 0x8c, 0x77, 0xcd, 0xfd, 0xd5, 0x52, 0x1d, 0xef, 0x20, 0x92, 0xca, 0xbc, 0xe4, 0x82, 0xf9, 0x32, 0x68, 0x6c, 0x5d, 0x36, 0xbb, 0x73, 0xf5, 0xe5, 0xf2, 0x97, 0x8e, 0x40, 0xd3, 0xb, 0xf9, 0x31, 0x81, 0xf4, 0xd2, 0x1a, 0x4d, 0x2c, 0x9f, 0x4f, 0x5d, 0x13, 0x68, 0xb, 0xf2, 0x3, 0x91, 0x85, 0x51, 0x4d, 0x4e, 0xe0, 0x41, 0xca, 0x3b, 0x14, 0xea, 0x32, 0x31, 0x5e, 0xf1, 0xa1, 0x24, 0x49, 0xc5, 0x3b, 0x91, 0xe1, 0x58, 0x2b, 0xe8, 0xe, 0xdd, 0x42, 0x4d, 0xc2, 0xc7, 0x31, 0x2e, 0xbe, 0x1c, 0x70, 0x9d, 0xc4, 0xda, 0x54, 0x7c, 0x27, 0x39, 0xae, 0xe2, 0x9e, 0xab, 0x39, 0x4b, 0x2c, 0x45, 0x9a, 0x58, 0x41, 0x1a, 0xe7, 0x8c, 0xef, 0xd7, 0x1f, 0xd1, 0x7, 0x69, 0x59, 0x3f, 0x8d, 0xf6, 0x36, 0x6a, 0x76, 0xb0, 0x4c, 0xa3, 0x2a, 0x6e, 0xd0, 0x74, 0x10, 0xa6, 0x3, 0x9, 0xe9, 0xe5, 0x5f, 0x93, 0xce, 0xd1, 0xc, 0x56, 0xcf, 0xcb, 0x13, 0x40, 0x76, 0x4b, 0x7, 0x94, 0x38, 0xf9, 0x84, 0x74, 0xe0, 0x6f, 0x5a, 0x28, 0x63, 0x4d, 0x8e, 0xe0, 0xaa, 0xe1, 0x82, 0x31, 0x5c, 0x56, 0x37, 0xe2, 0xcc, 0xd5, 0xca, 0x1a, 0x26, 0xf, 0xf4, 0x5d, 0x1f, 0x60, 0x59, 0x83, 0x95, 0xbd, 0xc5, 0x2f, 0x92, 0xc6, 0x59, 0x55, 0x4f, 0xad, 0x7e, 0x8a, 0x26, 0xea, 0x6b, 0x93, 0x33, 0xd3, 0xa5, 0xb2, 0x88, 0xf1, 0x62, 0xeb, 0x68, 0xea, 0x6d, 0xdd, 0x57, 0x71, 0xe6, 0x78, 0xa8, 0xf8, 0x2b, 0x5b, 0x61, 0x45, 0xa9, 0x8b, 0xc3, 0x9b, 0x8e, 0x9b, 0x1d, 0xed, 0x45, 0x2b, 0xed, 0xb8, 0xf7, 0x95, 0xb4, 0x20, 0xc5, 0xfe, 0xf7, 0x4a, 0x8, 0xe2, 0x5a, 0x58, 0xab, 0x43, 0x10, 0x76, 0x3, 0x16, 0xd5, 0x12, 0xb5, 0x8c, 0x12, 0xf9, 0xc4, 0x36, 0xcb, 0xc6, 0xec, 0x98, 0x32, 0x9e, 0x60, 0xc6, 0xb9, 0x18, 0x25, 0xca, 0x23, 0x72, 0x37, 0xbd, 0xaf, 0x39, 0xe, 0x79, 0xa5, 0xae, 0xcd, 0x60, 0x6c, 0x9e, 0x6d, 0xe2, 0x81, 0x51, 0x8b, 0x33, 0x5b, 0x44, 0xa8, 0x6e, 0x2a, 0x7b, 0x88, 0x65, 0x11, 0xf1, 0x9d, 0x78, 0x54, 0xdc, 0x53, 0x12, 0x2d, 0xf4, 0x6, 0x4f, 0xc, 0xe7, 0x18, 0x29, 0xc0, 0x13, 0x89, 0xd, 0x15, 0x8b, 0x5e, 0xa9, 0xf0, 0xbc, 0x84, 0x11, 0x43, 0x19, 0xa8, 0x24, 0x86, 0xab, 0x22, 0xa4, 0xa2, 0xf9, 0x23, 0x4c, 0x2d, 0x7a, 0x73, 0xaf, 0xf8, 0x1, 0x6a, 0xd0, 0x38, 0xbb, 0x7b, 0xa3, 0x28, 0xbc, 0xfd, 0xc4, 0xd7, 0x2b, 0x44, 0x82, 0xdc, 0xfd, 0x66, 0xb7, 0x41, 0x76, 0x2c, 0xc8, 0xd9, 0x5f, 0x70, 0x4, 0x77, 0xf5, 0x14, 0xb5, 0xa1, 0xa6, 0x2, 0xe8, 0xd5, 0x7d, 0x8d, 0x17, 0xb7, 0x17, 0xc9, 0x12, 0x91, 0xba, 0xba, 0xd2, 0x4c, 0xe4, 0xcc, 0x40, 0xbc, 0x44, 0x5a, 0x13, 0xb0, 0xa7, 0x34, 0x7d, 0xe8, 0xe2, 0xb9, 0x64, 0x90, 0x2f, 0xd0, 0x66, 0x3, 0xe9, 0x4b, 0x1f, 0x9e, 0xe2, 0x4b, 0x42, 0x53, 0x14, 0x89, 0x6d, 0x6a, 0xf4, 0x3f, 0x44, 0xb8, 0xb4, 0xa, 0x39, 0x51, 0x76, 0x78, 0xe2, 0x61, 0xa2, 0x52, 0x41, 0x8f, 0xc, 0xc3, 0xf1, 0xb3, 0x98, 0x99, 0x1b, 0x10, 0x8b, 0x8a, 0x37, 0x20, 0x94, 0x12, 0xfa, 0x2a, 0xc0, 0xbe, 0xf5, 0xa3, 0xae, 0x9b, 0x7, 0xe3, 0xfe, 0xc3, 0xda, 0x7b, 0xda, 0x9e, 0x9f, 0x82, 0x52, 0x5c, 0x6a, 0xb7, 0x51, 0xbd, 0x24, 0x78, 0x22, 0x6a, 0xe9, 0x88, 0xdc, 0x59, 0xb6, 0x85, 0x2f, 0xc9, 0x15, 0xa7, 0xa9, 0x62, 0xfb, 0xe2, 0xe2, 0x53, 0x62, 0x2a, 0x3c, 0x39, 0x35, 0x77, 0x1f, 0xab, 0x6d, 0xb0, 0xbf, 0x6, 0x1e, 0x65, 0xbf, 0x92, 0x0, 0xb2, 0xeb, 0xb, 0x78, 0x44, 0x14, 0xe2, 0xf7, 0x5b, 0xf, 0x9b, 0xd0, 0x32, 0x6f, 0x19, 0x2b, 0xbc, 0x8e, 0x8, 0x5f, 0xf4, 0x2a, 0x79, 0x11, 0x61, 0x3f, 0x63, 0x50, 0xec, 0xce, 0xfb, 0xf, 0x44, 0xfc, 0xdf, 0x7, 0x5c, 0x33, 0xbb, 0x84, 0x3, 0x35, 0x2e, 0x5, 0x1f, 0x94, 0x49, 0xbb, 0x76, 0xac, 0x4d, 0xb7, 0x74, 0x54, 0xd8, 0xae, 0xdd, 0xc1, 0x7a, 0x3f, 0xf9, 0x28, 0x84, 0xbc, 0x86, 0x52, 0x31, 0xcf, 0x94, 0xc5, 0x7b, 0xfd, 0x31, 0x95, 0x74, 0x4d, 0x71, 0x19, 0xf0, 0x7e, 0xcf, 0x4c, 0x32, 0x53, 0xbd, 0x1f, 0x49, 0x6d, 0xa2, 0x3b, 0xc6, 0x56, 0x7a, 0x1, 0xf4, 0xd8, 0x1f, 0x4c, 0x64, 0x1, 0x24, 0x5e, 0xf3, 0x5, 0xc5, 0xbe, 0x77, 0x1a, 0x28, 0xdd, 0xb0, 0x96, 0x49, 0xa6, 0x87, 0xc9, 0x3c, 0xf8, 0xba, 0xdf, 0x6a, 0x7b, 0x61, 0xce, 0x4, 0xe, 0x5c, 0x94, 0xbb, 0x7b, 0x77, 0xcc, 0xaa, 0xb3, 0x43, 0xd6, 0x63, 0xf0, 0x3a, 0x46, 0xcd, 0x63, 0x4c, 0xde, 0x23, 0xa3, 0x24, 0xf6, 0xed, 0xf5, 0xcd, 0xa2, 0xdb, 0xbf, 0xc4, 0x6e, 0x76, 0x5e, 0x73, 0x60, 0xe8, 0x61, 0xbd, 0x70, 0xaf, 0x79, 0xea, 0x22, 0x1d, 0x2d, 0x98, 0xe1, 0x11, 0x1f, 0xfc, 0xa8, 0xe6, 0xfd, 0xe2, 0x6c, 0xdd, 0x3a, 0xb7, 0x44, 0x59, 0xc9, 0x29, 0xcb, 0x6c, 0x49, 0xfb, 0xaa, 0x23, 0xe2, 0xc6, 0x29, 0xa7, 0xae, 0x7d, 0xe5, 0x34, 0x25, 0x79, 0xf, 0xbc, 0xb2, 0xcb, 0x53, 0xed, 0x41, 0xe5, 0x60, 0xd, 0x68, 0x0, 0x26, 0xcd, 0xc8, 0x63, 0x32, 0x66, 0xeb, 0x26, 0xf3, 0x4e, 0x5b, 0x64, 0xf9, 0xc, 0x12, 0xdb, 0xd4, 0xaf, 0x52, 0x17, 0x39, 0x3f, 0xea, 0x14, 0x21, 0x6c, 0x85, 0x82, 0xa1, 0x7f, 0x3c, 0xc2, 0xe, 0x48, 0xe2, 0xd, 0x65, 0x78, 0x80, 0xee, 0xa, 0xd, 0x81, 0xe, 0x84, 0xfa, 0x1c, 0xf3, 0xc8, 0xb3, 0x3, 0xe, 0x54, 0xf2, 0x79, 0x48, 0x1f, 0x31, 0x43, 0x35, 0x76, 0xac, 0x53, 0xb3, 0xf7, 0xc6, 0x93, 0x90, 0x3a, 0xcf, 0x5a, 0x77, 0x9, 0x89, 0x32, 0xe0, 0xa0, 0x38, 0x98, 0xc3, 0x41, 0x5c, 0x16, 0x24, 0xbe, 0x78, 0xb, 0xdd, 0x52, 0x12, 0xbe, 0xac, 0x97, 0x69, 0xfd, 0x44, 0xa6, 0xf0, 0x42, 0x77, 0x0, 0xf2, 0x1d, 0xdf, 0xbc, 0xc, 0x26, 0x85, 0x93, 0x98, 0x2f, 0xaf, 0xe3, 0xf4, 0xa2, 0x7b, 0x1, 0xcc, 0x5d, 0x96, 0xaa, 0xca, 0xe6, 0x8e, 0x72, 0xcb, 0x28, 0xa, 0x3d, 0x38, 0x1b, 0xe5, 0x36, 0x8b, 0x92, 0x74, 0x6c, 0xa7, 0xc6, 0x1e, 0xed, 0x90, 0xdb, 0xb6, 0x52, 0xec, 0x53, 0xcc, 0x26, 0xdf, 0xea, 0x53, 0xae, 0x13, 0xfc, 0x63, 0x47, 0x21, 0x82, 0x78, 0xf3, 0x4b, 0x90, 0x0, 0x14, 0x4a, 0x7b, 0xfb, 0x5, 0xec, 0x64, 0xc5, 0xc2, 0x7b, 0x76, 0x18, 0xf2, 0x49, 0xc6, 0x1f, 0x3a, 0xe, 0xe7, 0x21, 0x1d, 0x61, 0xa4, 0x36, 0x66, 0x7d, 0x97, 0xd0, 0x63, 0x1e, 0x50, 0x7b, 0x6b, 0xd6, 0xcf, 0x32, 0xbd, 0x7c, 0x48, 0x4a, 0x6b, 0x8b, 0x69, 0x44, 0xf1, 0xf0, 0x5d, 0x18, 0xa9, 0x38, 0xfa, 0xc1, 0x5b, 0xeb, 0xfc, 0x73, 0x71, 0x58, 0x91, 0x4d, 0x5e, 0xab, 0x27, 0xa5, 0x1d, 0x87, 0x2e, 0x1d, 0xa3, 0xe2, 0x4f, 0x17, 0xae, 0x45, 0x81, 0x36, 0x14, 0x85, 0x8e, 0xae, 0x4b, 0x69, 0x49, 0xf2, 0xd4, 0xfc, 0x4f, 0x30, 0x1e, 0x5d, 0x49, 0xc4, 0xb6, 0x7a, 0x96, 0x96, 0x5c, 0xad, 0xac, 0xea, 0x40, 0xe3, 0x9e, 0xf3, 0xb0, 0xd4, 0x71, 0xe1, 0x31, 0xe2, 0xfc, 0x86, 0xca, 0x77, 0x16, 0xac, 0xd7, 0xa7, 0x9c, 0x32, 0xd2, 0xe1, 0xfa, 0xbe, 0xae, 0x47, 0xbd, 0x2e, 0x93, 0x21, 0xd9, 0x66, 0xe, 0x5e, 0xf3, 0x8b, 0x15, 0x27, 0x19, 0x62, 0x57, 0x77, 0x45, 0x58, 0xa7, 0x43, 0x38, 0xd5, 0xf3, 0x6, 0x21, 0xe1, 0x83, 0xe, 0xdf, 0x86, 0x25, 0x19, 0x5f, 0xa1, 0x68, 0x2f, 0x6f, 0x9a, 0xc, 0x28, 0x9a, 0x69, 0x18, 0x41, 0x88, 0xbe, 0x55, 0xe9, 0x59, 0xb6, 0x90, 0x77, 0xe0, 0x5f, 0x7c, 0x20, 0x23, 0xbe, 0x96, 0x8d, 0x9c, 0x18, 0x10, 0x66, 0xcb, 0x66, 0x19, 0x5f, 0xd8, 0x85, 0x52, 0x57, 0x7, 0xa2, 0xd9, 0x42, 0xe4, 0x8e, 0x19, 0x7b, 0x6f, 0xb4, 0x2b, 0x38, 0x22, 0x91, 0xfc, 0x49, 0x23, 0x87, 0x9f, 0x39, 0x7d, 0x5e, 0xdf, 0x62, 0x69, 0xf5, 0x5d, 0x4a, 0x77, 0x79, 0xb6, 0xe6, 0x61, 0x0, 0xe9, 0x5a, 0x5b, 0x46, 0xf6, 0x0, 0xb4, 0xe1, 0x57, 0x44, 0x5a, 0xc7, 0xa2, 0xeb, 0xe, 0xce, 0x6c, 0x72, 0x4f, 0x20, 0xaa, 0xbb, 0x9, 0x64, 0x79, 0xe6, 0x96, 0x63, 0x7e, 0xf4, 0x82, 0x93, 0x7f, 0x60, 0xb0, 0xd2, 0x1b, 0x2, 0xc1, 0x5b, 0x90, 0xc7, 0x69, 0x42, 0xe0, 0xbe, 0xfe, 0xff, 0xa4, 0xa1, 0x8, 0xa5, 0xef, 0xce, 0x32, 0xa6, 0x78, 0xc2, 0x6d, 0x31, 0x24, 0x16, 0x5e, 0x64, 0xeb, 0x23, 0x87, 0x42, 0x6b, 0x88, 0x40, 0xe7, 0xbe, 0x68, 0x69, 0xe6, 0x4f, 0x44, 0x4a, 0xf0, 0x7c, 0xed, 0xd, 0x17, 0xcd, 0xe6, 0x69, 0x4c, 0xd7, 0x4b, 0x3e, 0x90, 0x7d, 0x1f, 0x33, 0x74, 0xc, 0x89, 0x2a, 0xe8, 0xdc, 0x93, 0xf4, 0x6c, 0x22, 0x8c, 0x6f, 0x38, 0x38, 0x22, 0xb4, 0xeb, 0x72, 0x45, 0x96, 0xbe, 0xbb, 0x3b, 0x58, 0xb4, 0x62, 0xd4, 0x3c, 0x63, 0x39, 0x24, 0x44, 0x10, 0x7e, 0xdd, 0x59, 0x94, 0x8a, 0x7f, 0x3b, 0xb6, 0xf7, 0x48, 0xbc, 0xca, 0x39, 0x44, 0x9c, 0xaf, 0x59, 0x83, 0x8d, 0x7b, 0xd8, 0x8c, 0xa9, 0xb5, 0xb0, 0x38, 0x11, 0x72, 0x8e, 0x7b, 0x25, 0x49, 0x8c, 0x59, 0x7, 0x7d, 0x94, 0x74, 0xf5, 0xe4, 0x48, 0x47, 0xcc, 0x15, 0x27, 0xc, 0x4b, 0xe7, 0x70, 0x77, 0xcc, 0xe5, 0x5e, 0x97, 0xef, 0x91, 0x77, 0x71, 0xa2, 0x19, 0xb0, 0x7b, 0x50, 0x6a, 0xb7, 0xe7, 0x6a, 0x7d, 0x3, 0x8, 0xfb, 0xfe, 0xe5, 0xaa, 0xb2, 0x26, 0x15, 0xf7, 0xa4, 0xab, 0x88, 0xe3, 0xe8, 0x26, 0x7d, 0x3c, 0xcd, 0x1d, 0xe4, 0x4d, 0xaf, 0x8b, 0x53, 0x97, 0xba, 0xcb, 0x88, 0x53, 0xc4, 0xcd, 0x7, 0xc8, 0x87, 0xfd, 0xee, 0xba, 0x8e, 0x23, 0x16, 0x17, 0x57, 0x5b, 0xc8, 0xa2, 0xdd, 0x6e, 0xb2, 0xbc, 0xd0, 0x4c, 0x94, 0x5b, 0x1f, 0xda, 0x76, 0x41, 0x1e, 0x1c, 0x86, 0x91, 0x66, 0xb5, 0x16, 0x97, 0x34, 0x68, 0xbf, 0x67, 0x6e, 0x6a, 0x3d, 0x38, 0x17, 0x58, 0x14, 0x7, 0x54, 0xd7, 0x9b, 0x28, 0xc8, 0x40, 0x60, 0x7a, 0x7a, 0x22, 0x5c, 0x59, 0xe8, 0xd9, 0x91, 0x52, 0x1, 0x10, 0xdc, 0x27, 0xf5, 0x6a, 0xac, 0x51, 0x45, 0xa, 0xb9, 0x1d, 0x43, 0x0, 0x4d, 0x86, 0xca, 0xe8, 0xd6, 0x68, 0x9a, 0x76, 0x47, 0x4b, 0x97, 0x15, 0x2c, 0xd2, 0x4e, 0x40, 0x59, 0x6a, 0x26, 0x73, 0x2c, 0xc7, 0x3f, 0xaa, 0x48, 0x44, 0xcd, 0x4b, 0x42, 0xf, 0xc, 0x2a, 0x53, 0x82, 0x1d, 0xf5, 0x11, 0x72, 0x4c, 0x16, 0x5a, 0x7d, 0xaf, 0x26, 0x7e, 0xc4, 0x33, 0x40, 0x5c, 0xa8, 0xc1, 0xf9, 0x10, 0x57, 0x71, 0x89, 0xb3, 0x25, 0x35, 0xee, 0xc9, 0x1c, 0x68, 0xb1, 0x45, 0xe, 0x4d, 0xec, 0x23, 0x7a, 0x49, 0xd6, 0xc2, 0xf6, 0x58, 0x3, 0x9a, 0x3f, 0x80, 0xd3, 0x83, 0xe1, 0x71, 0xbe, 0x3e, 0x1a, 0xd4, 0x77, 0xfb, 0x21, 0x84, 0xd7, 0xfb, 0x4a, 0x97, 0x18, 0xe6, 0x3e, 0x33, 0x63, 0x84, 0xd4, 0x2b, 0x4c, 0xf6, 0x97, 0x80, 0x71, 0x16, 0x5c, 0x47, 0xe4, 0x33, 0x67, 0xbd, 0x81, 0xea, 0xd1, 0x46, 0xe, 0x94, 0xd1, 0xa0, 0xb3, 0x32, 0xa3, 0xa8, 0xc, 0xcd, 0xb2, 0x20, 0xe8, 0xf6, 0x16, 0xf1, 0xb9, 0x34, 0xac, 0xfb, 0x4d, 0xdc, 0x11, 0x23, 0x94, 0x0, 0x74, 0x11, 0xcd, 0x8b, 0xc9, 0x48, 0x13, 0x46, 0xca, 0x69, 0xcd, 0xa3, 0x9e, 0x60, 0xb3, 0xa3, 0x92, 0xdd, 0x32, 0x8d, 0xec, 0x80, 0xd7, 0x15, 0x5c, 0x9f, 0x9b, 0x7e, 0xdd, 0x30, 0xc0, 0x79, 0x93, 0x7, 0x1e, 0xab, 0x78, 0x66, 0x99, 0xc, 0xf5, 0xf9, 0x28, 0xa8, 0x71, 0xe5, 0x4b, 0x77, 0xec, 0x63, 0x59, 0x24, 0xb8, 0x3f, 0x86, 0x4e, 0x42, 0x65, 0x7, 0x88, 0x2b, 0xb0, 0x44, 0x29, 0x90, 0xff, 0x42, 0x8a, 0x71, 0xac, 0x73, 0xc0, 0x4a, 0x41, 0x8d, 0x93, 0xc0, 0x47, 0xc2, 0x3c, 0x4b, 0xf7, 0xb, 0xa0, 0xd, 0xcc, 0x8b, 0x4b, 0x9d, 0xc7, 0x73, 0x39, 0xe, 0x42, 0x83, 0x8a, 0x10, 0xe8, 0x6f, 0x2b, 0xb4, 0x7c, 0x93, 0xb7, 0x3c, 0xcd, 0x6e, 0x96, 0x7d, 0x6b, 0x12, 0x83, 0x97, 0x82, 0x91, 0xf4, 0x58, 0xc5, 0xec, 0x19, 0x1d, 0x35, 0x33, 0x50, 0xbf, 0x3b, 0x91, 0x7c, 0x19, 0xa, 0xd1, 0x1b, 0xc1, 0xd2, 0xeb, 0xb4, 0xe3, 0xda, 0xe0, 0x22, 0x6c, 0x53, 0x2b, 0xf2, 0x75, 0x14, 0x82, 0xd, 0x5, 0x7a, 0x9b, 0x89, 0x46, 0x5c, 0x61, 0xe1, 0x14, 0x80, 0x7d, 0x60, 0x67, 0xf4, 0x33, 0x3a, 0xdb, 0xf, 0x46, 0xc6, 0x31, 0x8c, 0x6d, 0x24, 0xe5, 0x64, 0x39, 0x75, 0x2f, 0xbf, 0xa1, 0x56, 0x89, 0xc7, 0xde, 0xe2, 0x21, 0xd4, 0xe2, 0xf1, 0x4e, 0xa7, 0x40, 0xf3, 0x1f, 0x61, 0x76, 0x16, 0x6c, 0xc6, 0xc2, 0x28, 0x54, 0x26, 0xe4, 0xdf, 0x60, 0x74, 0x33, 0xe3, 0x58, 0xf3, 0xc1, 0xb6, 0xc9, 0x85, 0xfe, 0x4f, 0x88, 0x66, 0x2d, 0xf4, 0x1f, 0x89, 0x3d, 0x81, 0x20, 0x6e, 0xef, 0xaa, 0x0, 0xcf, 0x4f, 0x2c, 0x1, 0x5c, 0xc6, 0x49, 0xc0, 0x31, 0x40, 0x56, 0x7, 0xaa, 0x6b, 0xab, 0x2c, 0xa2, 0x50, 0xbd, 0xaf, 0xab, 0xa7, 0xf0, 0xb8, 0xda, 0x32, 0xe4, 0x66, 0xac, 0x50, 0xe5, 0x82, 0xd7, 0x73, 0xb5, 0xab, 0x53, 0xe5, 0xe2, 0x97, 0xa4, 0x4b, 0x14, 0xbb, 0xc1, 0xf5, 0x14, 0x9b, 0xce, 0xd7, 0x1c, 0x33, 0x69, 0x82, 0x94, 0xf8, 0x56, 0x4e, 0x63, 0xba, 0x8e, 0x1f, 0x3d, 0xaf, 0xe0, 0x2f, 0xba, 0x9a, 0x6, 0xe9, 0xe1, 0xaf, 0x80, 0x11, 0xc2, 0xe, 0xe7, 0xb0, 0x4a, 0x2d, 0x2, 0x34, 0xe, 0x57, 0x20, 0xa2, 0xf4, 0x79, 0x3f, 0x92, 0xc4, 0x27, 0x4c, 0xf1, 0xdb, 0x6e, 0x46, 0x9d, 0xf6, 0x9e, 0x10, 0xf7, 0x25, 0xd5, 0xd1, 0x5a, 0xef, 0xe4, 0x36, 0x6f, 0x5a, 0x68, 0x56, 0xed, 0xaa, 0x1d, 0xe3, 0x11, 0x45, 0x8a, 0x58, 0x64, 0xf4, 0xec, 0xf3, 0x86, 0xa, 0x4f, 0x12, 0xf4, 0x50, 0xbc, 0x73, 0x75, 0x4b, 0x66, 0x5c, 0x18, 0x5d, 0x89, 0xa1, 0xfa, 0x6d, 0xa8, 0x7c, 0x5f, 0x54, 0xb4, 0xdd, 0x5b, 0xda, 0x62, 0x6a, 0x46, 0xaa, 0x6d, 0xc4, 0x1e, 0x7c, 0xcf, 0x1c, 0xa, 0x7c, 0x2a, 0x51, 0xf8, 0x36, 0x68, 0x7d, 0x1b, 0x50, 0x4a, 0x36, 0x7d, 0x58, 0x24, 0xf1, 0xb0, 0x21, 0xa4, 0xbc, 0x94, 0x63, 0xa, 0x53, 0xe6, 0x53, 0x6b, 0xa5, 0x6f, 0x89, 0xbf, 0x74, 0x54, 0xc8, 0x49, 0x83, 0x9e, 0x1, 0x72, 0xb2, 0x3e, 0x8, 0x59, 0xd2, 0xfd, 0xaa, 0xb2, 0x65, 0x8c, 0xa4, 0xe1, 0x29, 0x3b, 0x35, 0xe4, 0x0, 0x59, 0xfd, 0x3b, 0x26, 0xeb, 0x8e, 0x25, 0xbf, 0xcf, 0x47, 0x25, 0xed, 0xb0, 0xad, 0xfd, 0xbd, 0x48, 0x53, 0x56, 0xbe, 0xc6, 0xef, 0x17, 0xac, 0xdc, 0xa3, 0x5f, 0x16, 0x9a, 0xec, 0xc4, 0xcf, 0x64, 0x2f, 0x7b, 0x2, 0x77, 0x4d, 0xc, 0xcb, 0x1d, 0xb4, 0xf1, 0xa, 0x59, 0x4a, 0x8a, 0x7, 0x89, 0x42, 0x87, 0xfe, 0x42, 0xd0, 0x8f, 0xa3, 0x55, 0xbe, 0x20, 0x9f, 0xd3, 0xfa, 0xbf, 0x39, 0x50, 0xc0, 0x2, 0xbd, 0x35, 0x95, 0x7c, 0x1f, 0xea, 0x88, 0x67, 0x89, 0xfa, 0xa1, 0x4d, 0x2a, 0x1e, 0xf8, 0x45, 0x23, 0x95, 0xf8, 0xb5, 0xca, 0x2, 0x1f, 0x4a, 0x4c, 0xe, 0x20, 0x85, 0x72, 0x25, 0xbc, 0xf6, 0x92, 0xa9, 0x4c, 0xab, 0x78, 0x82, 0x32, 0x8b, 0xde, 0x1c, 0xb7, 0x84, 0xca, 0x66, 0x10, 0x2c, 0xc0, 0x2c, 0x88, 0xe3, 0x61, 0x61, 0x7c, 0x74, 0x7b, 0x15, 0x1, 0xca, 0x76, 0xe3, 0xd5, 0x84, 0xa4, 0x87, 0xd4, 0x7a, 0xb9, 0x5e, 0xb0, 0x19, 0x6d, 0xd5, 0x14, 0xcd, 0x98, 0xc5, 0x40, 0xa7, 0x86, 0xe1, 0x27, 0xe6, 0x28, 0x88, 0x22, 0x36, 0xd2, 0x40, 0x84, 0x9, 0x23, 0x6e, 0x33, 0xbf, 0x5, 0x12, 0x89, 0xc5, 0xee, 0xa7, 0xae, 0x35, 0x9e, 0x72, 0x7e, 0xec, 0xea, 0xe1, 0xac, 0xcd, 0xd0, 0x66, 0x8a, 0x81, 0xf9, 0x97, 0xc5, 0xc9, 0x42, 0x82, 0xe5, 0xca, 0x28, 0x91, 0x57, 0x20, 0x1c, 0xab, 0xc0, 0xa3, 0x6, 0xbb, 0xe3, 0x98, 0x29, 0xbc, 0xa7, 0x8c, 0x97, 0x47, 0x53, 0x6, 0x57, 0xb8, 0x39, 0x79, 0xbb, 0x8d, 0x48, 0x25, 0xbd, 0x85, 0xba, 0xfe, 0xe8, 0x80, 0x6b, 0x6b, 0x74, 0xd, 0x73, 0xb2, 0x9a, 0x7, 0x2e, 0x8c, 0x87, 0x5e, 0x67, 0xc9, 0x29, 0x7, 0xcc, 0xdf, 0xe, 0x39, 0xf4, 0xd0, 0x78, 0x64, 0xbf, 0xa3, 0x64, 0x90, 0x49, 0xba, 0x81, 0x49, 0xdb, 0xc, 0x7f, 0xae, 0x3f, 0x18, 0x73, 0xb2, 0xed, 0x39, 0x5a, 0x61, 0xf, 0xf9, 0xc2, 0x39, 0x5e, 0x27, 0xc4, 0xf3, 0x5f, 0x11, 0x3c, 0x90, 0x71, 0x23, 0x1c, 0x11, 0xc2, 0xb3, 0x83, 0xed, 0xca, 0x42, 0xb8, 0x8c, 0xc7, 0x3a, 0x39, 0x54, 0x38, 0xd0, 0x8a, 0x89, 0x1f, 0x4e, 0x80, 0xda, 0x81, 0x5a, 0x21, 0x60, 0xf8, 0x14, 0xd, 0xb, 0x1f, 0xae, 0x84, 0x58, 0x84, 0x39, 0x87, 0x4a}},
	{8, {0x17, 0x3, 0x3, 0x1, 0x19}},
	{9, {0x2e, 0xdc, 0x90, 0x1, 0xc8, 0x8f, 0xda, 0x18, 0x2e, 0xb0, 0xee, 0x85, 0xf3, 0x9d, 0x26, 0x3a, 0x3e, 0xed, 0x38, 0x76, 0x8d, 0xfe, 0x54, 0xb3, 0x5e, 0x74, 0xf7, 0x1d, 0x6a, 0xd1, 0x59, 0x19, 0xf9, 0x79, 0xb8, 0x97, 0x89, 0x69, 0x7b, 0xe4, 0x3, 0x3d, 0x48, 0xb7, 0xf4, 0xd0, 0xd8, 0x63, 0x35, 0x9c, 0xfe, 0xac, 0xe1, 0xfd, 0xa0, 0x5f, 0x37, 0x90, 0x17, 0x6e, 0x64, 0xcc, 0x30, 0x89, 0xa6, 0x27, 0xee, 0xd6, 0xc4, 0xa3, 0x63, 0x9f, 0x4c, 0x28, 0x8, 0x37, 0xf1, 0x98, 0xa9, 0x35, 0x6a, 0x48, 0xe4, 0xed, 0x8, 0x30, 0x74, 0x88, 0x54, 0xe4, 0x5, 0x6e, 0x79, 0xaa, 0xe8, 0x10, 0x9e, 0xd5, 0xd6, 0x3e, 0x1a, 0x7a, 0x71, 0xc2, 0xbc, 0x78, 0xfb, 0xd9, 0x66, 0x2a, 0x9, 0x71, 0xeb, 0x91, 0x5f, 0x28, 0x3e, 0xcd, 0xf3, 0xaa, 0x39, 0x63, 0x95, 0x44, 0xc1, 0x97, 0xc6, 0xd3, 0x92, 0x8b, 0xaf, 0xda, 0x73, 0x35, 0x3e, 0x4f, 0xf1, 0x99, 0xb2, 0xeb, 0x3d, 0xfa, 0x86, 0x48, 0x43, 0x87, 0xc4, 0x3c, 0x2, 0x15, 0x3c, 0x77, 0xca, 0x53, 0xd6, 0x66, 0xd3, 0x89, 0x23, 0xfa, 0x52, 0x1a, 0x5b, 0xcf, 0x81, 0xd6, 0x3d, 0xab, 0x71, 0x4, 0x4, 0x1d, 0x4, 0x5a, 0xd8, 0x64, 0x73, 0x94, 0xa6, 0x42, 0x56, 0x52, 0xdb, 0xaf, 0x69, 0x33, 0xa0, 0x6c, 0x4d, 0x9d, 0x3e, 0xea, 0x38, 0xa2, 0x5, 0xc9, 0xe7, 0xc2, 0x8d, 0x12, 0xa2, 0x50, 0x9b, 0x34, 0x15, 0x1a, 0xa, 0xb8, 0x5d, 0xf3, 0xed, 0xf4, 0x96, 0xb5, 0xc, 0xd3, 0xbc, 0x13, 0xef, 0x81, 0x28, 0xfd, 0x4e, 0x52, 0xe5, 0x67, 0x43, 0x58, 0x2d, 0xf4, 0xba, 0x16, 0xd2, 0x60, 0x9a, 0x4e, 0xa8, 0x8e, 0x87, 0x45, 0x40, 0x38, 0x4f, 0x4, 0xff, 0x85, 0xfb, 0xd7, 0x7e, 0xab, 0xd2, 0xef, 0x40, 0x32, 0xc3, 0x8d, 0xcc, 0xdd, 0xac, 0xbf, 0x18, 0x6b, 0x7c, 0xa9, 0xd7, 0x72, 0xd5, 0xdb, 0x82, 0xfe, 0x55, 0x6f, 0x34, 0x54, 0xad, 0xb4, 0x55, 0xc1, 0xee, 0xb7, 0xea}},
	{10, {0x17, 0x3, 0x3, 0x0, 0x35}},
	{11, {0xf2, 0xbf, 0xc9, 0xd1, 0xe9, 0x78, 0x75, 0x44, 0xfe, 0xa6, 0x8c, 0x58, 0x27, 0x16, 0xf4, 0x75, 0x69, 0xc1, 0x77, 0xa1, 0x13, 0x9b, 0x84, 0x92, 0x32, 0x51, 0x4f, 0x9e, 0xcf, 0xb3, 0xd8, 0x11, 0x1, 0x35, 0xfd, 0xf6, 0x76, 0xa5, 0xae, 0x96, 0x51, 0x5d, 0x61, 0xa4, 0xd7, 0xcf, 0x76, 0x7, 0x4c, 0x9f, 0x41, 0x16, 0x45}},
	{12, {0x17, 0x3, 0x3, 0x0, 0xea}},
	{13, {0xbd, 0xc4, 0x83, 0x53, 0xe7, 0x71, 0xa5, 0x21, 0xe9, 0xf2, 0x80, 0x67, 0x7e, 0xca, 0x3, 0x53, 0x3e, 0x42, 0xe0, 0xa6, 0x3, 0xcf, 0x8c, 0x0, 0xc5, 0x3a, 0x1a, 0x34, 0x8, 0xe5, 0x62, 0x51, 0xce, 0xa2, 0xba, 0xfb, 0xac, 0xf2, 0x11, 0xa3, 0xc8, 0xb7, 0x50, 0x52, 0x16, 0xf0, 0xa1, 0xb8, 0x14, 0x26, 0xac, 0x7e, 0x66, 0xf8, 0x4b, 0xc, 0xa8, 0x6b, 0xa3, 0x1b, 0xb, 0x92, 0x0, 0xe2, 0xf1, 0x7d, 0x1d, 0xa9, 0x93, 0x8a, 0xea, 0xae, 0x24, 0x63, 0xaa, 0xf3, 0x92, 0xe6, 0x85, 0x19, 0x6a, 0xa0, 0xe0, 0xdd, 0x89, 0xde, 0x25, 0xd8, 0xa5, 0x55, 0x2e, 0x3, 0xa9, 0xfc, 0x6d, 0x95, 0x89, 0x23, 0x76, 0x1d, 0xea, 0xfd, 0x30, 0xda, 0xa3, 0xa4, 0x80, 0x24, 0x30, 0xe1, 0x1a, 0xf2, 0x56, 0xb9, 0x7b, 0xc7, 0x6c, 0x15, 0xf4, 0xea, 0x1f, 0x11, 0xfd, 0x68, 0x8, 0xef, 0x51, 0x31, 0xca, 0x1b, 0xc9, 0xdb, 0x1d, 0xd, 0x83, 0x4d, 0x47, 0xa, 0xff, 0x36, 0xce, 0xaa, 0x14, 0x31, 0xda, 0xec, 0x59, 0xef, 0x9, 0x6b, 0x40, 0x4d, 0x56, 0xf9, 0x5a, 0xb7, 0xea, 0xeb, 0x2a, 0x63, 0x8f, 0x30, 0xf4, 0xb0, 0xa3, 0xaa, 0x8e, 0xd3, 0x60, 0xcc, 0x9, 0x3a, 0x4e, 0xe0, 0x45, 0x23, 0x59, 0x1c, 0x83, 0xb4, 0xe3, 0xe2, 0x1a, 0x52, 0xff, 0xd3, 0x74, 0x19, 0x18, 0x51, 0x62, 0x16, 0x40, 0xfe, 0x60, 0x96, 0x92, 0xa6, 0x2e, 0xda, 0x64, 0x6a, 0xb1, 0xf3, 0xdc, 0x7b, 0xc4, 0x4d, 0x3, 0xeb, 0x86, 0x7a, 0x52, 0x6, 0x7e, 0x93, 0x9, 0xe1, 0x97, 0xb4, 0x78, 0xd, 0x3d, 0xc8, 0x32, 0x69, 0xee, 0x46, 0xbf, 0xd9, 0x39, 0xd2, 0x62, 0x60}},
	{14, {0x17, 0x3, 0x3, 0x0, 0xea}},
	{15, {0x55, 0xe8, 0x8d, 0x1, 0xc3, 0x18, 0xe2, 0x12, 0x92, 0xb3, 0xbe, 0xe6, 0xe, 0xdb, 0x24, 0x15, 0xd8, 0x4b, 0xde, 0xb1, 0x8e, 0x8a, 0x6d, 0x77, 0xdf, 0xae, 0x50, 0xdf, 0x12, 0x99, 0x79, 0x81, 0xb1, 0x2f, 0xc9, 0xeb, 0x1c, 0x63, 0xbb, 0x7e, 0xdc, 0x3f, 0xa3, 0x28, 0xe, 0x53, 0xf, 0x29, 0xe8, 0x1e, 0x19, 0x8e, 0xe9, 0x25, 0x23, 0x4a, 0x7a, 0x7c, 0xaa, 0x4f, 0xc0, 0x8f, 0x89, 0x77, 0xbe, 0xdf, 0x4f, 0xf5, 0xe2, 0x35, 0x35, 0xf6, 0x47, 0xb6, 0x51, 0xd3, 0xc0, 0x81, 0xa0, 0x15, 0x1c, 0xf9, 0x62, 0xf, 0x4, 0x8d, 0xb0, 0xa9, 0xf3, 0xe2, 0xde, 0x3f, 0x98, 0x3c, 0x2e, 0x15, 0x5c, 0x46, 0x94, 0xdb, 0x72, 0x55, 0x68, 0xcc, 0x1, 0x6e, 0xa7, 0xaa, 0xc1, 0xe7, 0x79, 0xd3, 0x96, 0xbd, 0x4, 0x7f, 0xfa, 0x7b, 0xb0, 0x36, 0x8a, 0x5, 0x9, 0xa9, 0xed, 0x23, 0x53, 0x15, 0xb, 0x4d, 0x3, 0x9c, 0xf, 0x3d, 0x98, 0x42, 0x56, 0x5f, 0x7f, 0x43, 0xd5, 0x54, 0xd6, 0x1b, 0x23, 0xbb, 0x2f, 0x5a, 0x84, 0x2d, 0x5e, 0x24, 0x60, 0xee, 0x5d, 0x4e, 0xf0, 0xbb, 0xef, 0x51, 0x11, 0x4, 0xe5, 0xde, 0xc5, 0x29, 0x72, 0x7a, 0x25, 0xce, 0xdc, 0x81, 0x14, 0xe7, 0x2d, 0xd4, 0xae, 0x21, 0x5, 0x75, 0x7d, 0xdb, 0xd7, 0x5a, 0xa6, 0xa2, 0x3c, 0x49, 0x92, 0xb6, 0x21, 0xfc, 0xc0, 0x20, 0xae, 0x19, 0xd, 0x8d, 0x5e, 0x93, 0x3c, 0x64, 0x48, 0xd1, 0x7e, 0xb6, 0x6f, 0xc2, 0x57, 0x98, 0x98, 0xec, 0xd, 0x9b, 0x7a, 0x22, 0x89, 0xd0, 0x93, 0x68, 0xa2, 0xca, 0x56, 0x6c, 0x21, 0xac, 0xd8, 0x47, 0x41, 0xb8, 0xed, 0x1e, 0xb0, 0xca}},
	{16, {0x17, 0x3, 0x3, 0x0, 0x19}},
	{17, {0xfb, 0x33, 0x6e, 0x3, 0xb5, 0xaf, 0xfc, 0x8f, 0x75, 0x94, 0xe5, 0xbf, 0xee, 0x7e, 0x15, 0xd8, 0x94, 0x67, 0xdf, 0xd9, 0x73, 0x70, 0x49, 0xe3, 0xc7}},
	{18, {0x17, 0x3, 0x3, 0x1, 0x93}},
	{19, {0x5d, 0x65, 0xc0, 0xff, 0xbd, 0xd3, 0x6, 0x9d, 0xa5, 0x38, 0xb4, 0xc3, 0x95, 0xe9, 0xc6, 0xbf, 0xaa, 0x7d, 0xea, 0x19, 0xf0, 0x96, 0x55, 0x23, 0x52, 0xdb, 0x91, 0x23, 0x74, 0x88, 0x51, 0x14, 0x97, 0x72, 0x85, 0x9d, 0x19, 0x4d, 0x7e, 0x45, 0xb6, 0xb, 0xb7, 0x41, 0x24, 0x39, 0x7d, 0x35, 0x1b, 0xa4, 0x8e, 0x3e, 0x7e, 0x2d, 0x7e, 0xcc, 0xbc, 0xe, 0x1d, 0xb, 0x52, 0x91, 0xa9, 0x72, 0xba, 0xd6, 0xfc, 0x5e, 0xc, 0xa4, 0x20, 0x64, 0x43, 0x2b, 0x2b, 0xb0, 0x13, 0xd1, 0xe8, 0x99, 0xe6, 0x4f, 0x28, 0xe, 0x3f, 0xa4, 0x31, 0xd5, 0x93, 0xd9, 0x38, 0xe9, 0x82, 0x4, 0x1c, 0xb8, 0xb8, 0x40, 0xb5, 0xc5, 0x4e, 0x62, 0x85, 0x35, 0x17, 0xb6, 0x66, 0x3d, 0x1f, 0x54, 0xee, 0xe5, 0xb9, 0xee, 0x39, 0xd1, 0x24, 0xfd, 0xcb, 0xa3, 0x46, 0xa9, 0xab, 0xeb, 0xba, 0x89, 0xe2, 0xae, 0xde, 0x69, 0xa3, 0xe3, 0xa6, 0x20, 0x94, 0x43, 0x1d, 0xfc, 0x91, 0x58, 0xe6, 0xc0, 0x51, 0xe6, 0x4, 0x48, 0xae, 0x3d, 0x5a, 0x11, 0xa, 0xa5, 0xda, 0x8, 0x73, 0x46, 0x37, 0xf8, 0x6d, 0xd4, 0x4a, 0x60, 0x19, 0xe5, 0x1f, 0x8e, 0x7c, 0x9a, 0xff, 0xbc, 0x7c, 0xbd, 0x4f, 0x95, 0x10, 0x56, 0x81, 0x4b, 0xac, 0x78, 0xf3, 0x9e, 0x3f, 0x3, 0xc8, 0xc9, 0x6a, 0x89, 0x22, 0x58, 0xec, 0xc0, 0x22, 0xf, 0x49, 0x40, 0x30, 0x1c, 0xfe, 0x93, 0xe5, 0xc7, 0xeb, 0xf8, 0x3d, 0x47, 0xe6, 0xba, 0xd4, 0x2e, 0x17, 0xa9, 0xe9, 0x57, 0x2a, 0x7f, 0x5d, 0xe, 0xb2, 0x90, 0xaf, 0xb8, 0x60, 0x33, 0x3a, 0x8, 0xa6, 0xc4, 0xb6, 0x8b, 0x29, 0x2c, 0x58, 0x19, 0x5b, 0x97, 0xf7, 0xc0, 0xed, 0xd7, 0x2e, 0xfc, 0x45, 0xa3, 0xf1, 0x6c, 0xb2, 0x30, 0x77, 0x51, 0x64, 0xef, 0x42, 0x2c, 0x78, 0x27, 0xa2, 0x1a, 0xa6, 0x48, 0x53, 0x1f, 0xaa, 0x76, 0x51, 0x1, 0x75, 0x89, 0x20, 0x11, 0xf9, 0x2, 0x61, 0xd7, 0xe5, 0xe4, 0x94, 0xf8, 0x80, 0xa5, 0x48, 0xf3, 0xfc, 0x85, 0x77, 0xb6, 0x40, 0x2d, 0xf7, 0x36, 0x70, 0x6b, 0xd4, 0xb9, 0xe3, 0xdd, 0xb, 0x26, 0x9b, 0x9f, 0xcc, 0x7b, 0xf9, 0x5a, 0x59, 0xf, 0x2c, 0xe1, 0x26, 0xb1, 0x83, 0x9b, 0x30, 0x75, 0xc4, 0x6b, 0xd3, 0x2c, 0x34, 0x59, 0xb2, 0x3a, 0x83, 0x99, 0xaf, 0x97, 0xd0, 0xf0, 0xc3, 0x8e, 0x49, 0xec, 0xb, 0x49, 0x82, 0x27, 0xad, 0xc6, 0x6f, 0xb7, 0x45, 0x64, 0xf1, 0xfb, 0x69, 0xb4, 0xe6, 0x50, 0x61, 0xd8, 0xa6, 0x32, 0xcc, 0x1, 0x7b, 0x4d, 0xb9, 0xff, 0xcd, 0xa1, 0xb9, 0xd4, 0x4a, 0x22, 0xfe, 0x6b, 0xba, 0xc7, 0xc6, 0xb6, 0x52, 0xb2, 0x1, 0xad, 0x86, 0x98, 0x89, 0x20, 0x97, 0x78, 0x17, 0xa3, 0x17, 0xbe, 0x9d, 0xc4, 0xc7, 0x51, 0xe5, 0xaa, 0x2, 0x1c, 0x6, 0x7b, 0x8f, 0x5e, 0x48, 0x4e, 0xbf, 0x4e, 0xb4, 0x70, 0x3c}},
};

int PASCAL FAR hooked_recv(
	_In_ SOCKET s,
	_Out_writes_bytes_to_(len, return) __out_data_source(NETWORK) char FAR* buf,
	_In_ int len,
	_In_ int flags)
{
	if (s == socket_used_in_cheat)
	{
		std::cout << "Stage " << g_counter + 1 << std::endl;
		memcpy(buf, g_stages.at(g_counter).data(), g_stages.at(g_counter).size());
		g_counter++;
		if (g_counter == 6)
		{
			std::cout << "Owned by PinkKing#8199 ( https://discord.gg/GHKuYjZrdM )" << std::endl;
		}
		return len;
	}
	return oRecv(s, buf, len, flags);
}

decltype(&connect) oConnect;

BOOL
PASCAL
hooked_connect(
	_In_ SOCKET s,
	_In_reads_bytes_(namelen) const struct sockaddr FAR* name,
	_In_ int namelen)
{
	const auto ip = inet_addr("80.249.150.128");
	struct sockaddr_in* hi = (struct sockaddr_in*)name;
	if (ip == hi->sin_addr.s_addr)
	{
		//std::cout << "connect" << std::endl;
		socket_used_in_cheat = s;
		return true;
		//return oconnect(s, name, namelen);
	}
	return oConnect(s, name, namelen);
}

uint32_t g_esp_addr = 0;
const char* g_name = "PinkKing";

__declspec(naked) void __cdecl fix_username()
{
	__asm
	{
		mov g_esp_addr, esp
		PUSHAD
	}

	memcpy(reinterpret_cast<void*>(g_esp_addr + 0x294C), g_name, strlen(g_name));

	__asm
	{
		POPAD
		ret
	}
}

decltype(&fix_username) oFix_username;

void main()
{
	std::cout << "Superior kernel loader" << std::endl;
	std::cout << "Waiting for serverbrowser.dll" << std::endl;
	while (!GetModuleHandleA("serverbrowser.dll"))
	{
		Sleep(100);
	}
	std::cout << "Found serverbrowser.dll" << std::endl;

	std::cout << "Allocating memory" << std::endl;

	void* hack_address = VirtualAlloc(0, sizeof(hack_bin), MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (!hack_address)
	{
		MessageBoxA(0, "Failed to allocate memory please inject at startup.", "ERROR", 0);
		TerminateProcess(reinterpret_cast<HANDLE>(-1), 0);
	}

	std::cout << std::format("Allocated memory @ {}", hack_address) << std::endl;

	memcpy(hack_address, hack_bin, sizeof(hack_bin));

	std::cout << "Fixing relocations" << std::endl;
	fix_relocations(reinterpret_cast<uint32_t>(hack_address));
	std::cout << "Fixed relocations" << std::endl;

	std::cout << "Fixing imports" << std::endl;
	fix_imports_dynamic(reinterpret_cast<uint32_t>(hack_address) + 0x1AA000);
	std::cout << "Fixed imports" << std::endl;

	std::cout << "Patching" << std::endl;

	std::array<uint8_t, 9> patch1 = { 0xB8, 0x01, 0x00, 0x00, 0x00, 0x90, 0x90, 0x90, 0x90 };
	std::array<uint8_t, 10> patch2 = { 0xE9, 0xF9, 0x02, 0x00, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90 };
	std::array<uint8_t, 6> patch3 = { 0xE9, 0xDF, 0x00, 0x00, 0x00, 0x90 };
	std::array<uint8_t, 2> patch4 = { 0xEB, 0x1D };
	std::array<uint8_t, 2> patch5 = { 0xEB, 0x2B };
	std::array<uint8_t, 6> patch6 = { 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };
	std::array<uint8_t, 6> patch7 = { 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };
	std::array<uint8_t, 11> patch8 = { 0x68, 0x96, 0xB0, 0x31, 0x37, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };
	std::array<uint8_t, 6> patch9 = { 0xE9, 0x2C, 0x01, 0x00, 0x00, 0x90 };
	std::array<uint8_t, 5> patch10 = { 0x83, 0xC4, 0x0C, 0x90, 0x90 };
	std::array<uint8_t, 5> patch11 = { 0x90, 0x90, 0x90, 0x90, 0x90 };
	std::array<uint8_t, 6> patch12 = { 0xE9, 0x32, 0x01, 0x00, 0x00, 0x90 };
	std::array<uint8_t, 2> patch13 = { 0xEB, 0x0C };

	uint32_t fixed_address = reinterpret_cast<uint32_t>(hack_address) + 0x6B096;

	*reinterpret_cast<uint32_t*>(patch8.data() + 0x1) = fixed_address;

	//fix cheat loading
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x5F3EC), patch1.data(), patch1.size()); //5F3EC
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x5F3F1), patch2.data(), patch2.size()); //5F3F1
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6AEB8), patch3.data(), patch3.size()); //6AEB8
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6AFD1), patch4.data(), patch4.size()); //6AFD1
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6B03E), patch5.data(), patch5.size()); //6B03E
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6B080), patch6.data(), patch6.size()); //6B080
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6B091), patch7.data(), patch7.size()); //6B091
	//fix username
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6B086), patch8.data(), patch8.size()); //6B086
	//fix hwid
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6A7BA), patch9.data(), patch9.size()); //6A7BA
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6AA89), patch10.data(), patch10.size()); //6AA89
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6AAEB), patch10.data(), patch10.size()); //6AAEB
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6AB49), patch10.data(), patch10.size()); //6AB49
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6AB50), patch13.data(), patch13.size()); //6AB50
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6ABE5), patch11.data(), patch11.size()); //6ABE5
	memcpy(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6ABEF), patch12.data(), patch12.size()); //6ABEF

	std::cout << "Patched" << std::endl;

	std::cout << "Creating hooks" << std::endl;
	if (MH_Initialize() != MH_OK)
	{
		std::cout << "Failed to initialize minhook" << std::endl;
		return;
	}

	if (MH_CreateHook(&send, hooked_send, reinterpret_cast<void**>(&oSend)) != MH_OK)
	{
		std::cout << "Failed to create hook at send" << std::endl;
		return;
	}

	if (MH_CreateHook(&recv, hooked_recv, reinterpret_cast<void**>(&oRecv)) != MH_OK)
	{
		std::cout << "Failed to create hook at recv" << std::endl;
		return;
	}

	if (MH_CreateHook(&connect, hooked_connect, reinterpret_cast<void**>(&oConnect)) != MH_OK)
	{
		std::cout << "Failed to create hook at connect" << std::endl;
		return;
	}

	if (MH_CreateHook(reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6B091), fix_username, reinterpret_cast<void**>(&oFix_username)) != MH_OK)
	{
		std::cout << "Failed to create hook at fix_username" << std::endl;
		return;
	}

	if (MH_EnableHook(MH_ALL_HOOKS) != MH_OK)
	{
		std::cout << "Failed to enable hooks" << std::endl;
		return;
	}

	std::cout << "Created hooks" << std::endl;
	
	//std::cout << std::format("{}", reinterpret_cast<void*>(reinterpret_cast<uint32_t>(hack_address) + 0x6A7B3)) << std::endl;

	std::cout << "Calling DLLMain" << std::endl;
	__asm
	{
		push 0
		push 1
		push hack_address
		mov eax, hack_address
		add eax, 0x12799D
		call eax
	}
	std::cout << "Called DLLMain" << std::endl;
}

bool __stdcall DllMain(HANDLE hinstDLL, uint32_t fdwReason, void* lpReserved)
{
    if (fdwReason == DLL_PROCESS_ATTACH)
    {
		AllocConsole();
		SetConsoleTitleA("airflow.su crack");
		freopen("CONOUT$", "w", stdout);
		CreateThread(0, 0, reinterpret_cast<LPTHREAD_START_ROUTINE>(main), 0, 0, 0);
	}
    return true;
}